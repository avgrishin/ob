
@{
  ViewBag.Title = "Платежи";
}

@section scripts {
  <style type="text/css">
    .icon-refresh
    {
      background-image: url(@Url.Content("~/Scripts/ExtJS62/build/classic/theme-crisp/resources/images/grid/refresh.png")) !important;
    }
    .gray-row .x-grid-cell {
      color: gray;
    }
  </style>
  <link rel="stylesheet" type="text/css" href="~/Scripts/ExtJS62/build/classic/theme-crisp/resources/theme-crisp-all.css" />
  <script type="text/javascript" src="~/Scripts/ExtJS62/ext-bootstrap.js"></script>

  <script type="text/javascript" src="~/Scripts/ExtJS62/build/classic/locale/locale-ru.js"></script>
  <script type="text/javascript" src="~/Scripts/ExtJS62/ux/Exporter.js"></script>

  <script type="text/javascript">

    Ext.apply(Ext.form.VTypes, {
      daterange: function (val, field) {
        var date = field.parseDate(val);
        if (!date) {
          return false;
        }
        if (field.startDateField) {
          var start = field.ownerCt.getComponent(field.startDateField);
          if (!start.maxValue || date.getTime() !== start.maxValue.getTime()) {
            start.setMaxValue(date);
            start.validate();
          }
        }
        else if (field.endDateField) {
          var end = field.ownerCt.getComponent(field.endDateField);
          if (!end.minValue || date.getTime() !== end.minValue.getTime()) {
            end.setMinValue(date);
            end.validate();
          }
        }
        /*
        * Always return true since we're only using this vtype to set the
        * min/max allowed values (these are tested for after the vtype test)
        */
        return true;
      }
    });

    Ext.override(Ext.form.field.ComboBox, {
      assertValue: function () {
        var me = this,
          value = me.getRawValue(),
          rec;

        if (me.multiSelect) {
          // For multiselect, check that the current displayed value matches the current
          // selection, if it does not then revert to the most recent selection.
          if (value !== me.getDisplayValue()) {
            me.setValue(me.lastSelection);
          }
        } else {
          // For single-select, match the displayed value to a record and select it,
          // If no value and we're allowing blank, clear the current value.
          // if it does not match a record then revert to the most recent selection.
          if (!value.length && me.allowBlank) {
            me.setValue(null);
          } else {
            rec = me.findRecordByDisplay(value);
            if (rec) {
              me.select(rec);
            } else {
              me.setValue(me.lastSelection);
            }
          }
        }
        me.collapse();
      }
    });

    Ext.define('Payment', {
      extend: 'Ext.data.Model',
      idProperty: 'ID',
      fields: [
        { name: 'ID', type: 'int' },
        { name: 'PayDate', type: 'date', dateFormat: "c" },
        { name: 'Number' },
        { name: 'BICI', type: 'string' },
        { name: 'RAccI', type: 'string' },
        { name: 'BankI', type: 'string' },
        { name: 'KAccI', type: 'string' },
        { name: 'INNI', type: 'string' },
        { name: 'KPPI', type: 'string' },
        { name: 'NameI', type: 'string' },
        { name: 'BICO', type: 'string' },
        { name: 'RAccO', type: 'string' },
        { name: 'KAccO', type: 'string' },
        { name: 'INNO', type: 'string' },
        { name: 'KPPO', type: 'string' },
        { name: 'NameO', type: 'string' },
        { name: 'Amount', type: 'number' },
        { name: 'Reference', type: 'string' },
        { name: 'Queue', type: 'number', defaultValue: 5 },
      ]
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storepmt',
      model: 'Payment',
      proxy: {
        type: 'ajax',
        api: {
          read: '@Url.Action("GetPaymentList")',
          create: '@Url.Action("addPayment")',
          update: '@Url.Action("updPayment")',
          destroy: '@Url.Action("delPayment")'
        },
        actionMethods: { read: 'POST' },
        reader: {
          type: 'json',
          rootProperty: 'data',
          totalProperty: 'totalCount'
        },
        writer: {
          type: 'json',
          rootProperty: 'data',
          writeAllFields: true,
          allowSingle: false,
          encode: false
        },
        simpleSortMode: true
      }
    });

    Ext.define('Plat', {
      extend: 'Ext.data.Model',
      idProperty: 'RAccI',
      fields: [
        { name: 'BICI', type: 'string' },
        { name: 'RAccI', type: 'string' },
        { name: 'BankI', type: 'string' },
        { name: 'KAccI', type: 'string' },
        { name: 'INNI', type: 'string' },
        { name: 'KPPI', type: 'string' },
        { name: 'NameI', type: 'string' }
      ]
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeplat',
      autoLoad: true,
      model: 'Plat',
      proxy: {
        type: 'ajax',
        api: {
          read: '@Url.Action("getPlatList")'
        },
        actionMethods: { read: 'GET' },
        reader: {
          type: 'json',
          rootProperty: 'data',
          totalProperty: 'totalCount'
        }
      }
    });

    Ext.define('Payment.Win', {
      extend: 'Ext.window.Window',
      alias: 'widget.pmtwin',

      initComponent: function () {
        Ext.apply(this, {
          width: 600,
          //closable: true,
          closeAction: 'hide',
          modal: true,
          buttonAlign: 'center',
          items: [{
            xtype: 'form',
            fieldDefaults: {
              labelAlign: 'right',
              //labelWidth: 110,
              msgTarget: 'side',
              anchor: '100%'
            },
            bodyPadding: 10,
            defaultType: 'textfield',
            items: [{
              xtype: 'fieldcontainer',
              layout: 'hbox',
              anchor: '100%',
              items: [{
                xtype: 'textfield',
                name: 'Number',
                fieldLabel: 'Платежное поручение N',
                width: 250,
                labelWidth: 160,
                labelAlign: 'left',
                margin: '0 10 0 0'
              }, {
                xtype: 'datefield',
                name: 'PayDate',
                fieldLabel: 'Дата',
                labelWidth: 60,
                width: 220,
                margin: '0 10 0 0',
                startDay: 1,
                allowBlank: false,
                format: 'd.m.Y'
              }]
            }, {
              xtype: 'fieldset',
              title: 'Плательщик',
              defaults: {
                labelWidth: 89,
                layout: {
                  type: 'hbox',
                  defaultMargins: { top: 0, right: 5, bottom: 0, left: 0 }
                }
              },
              defaultType: 'textfield',
              bodyPadding: 10,
              items: [{
                xtype: 'combo',
                store: 'storeplat',
                displayField: 'Text',
                valueField: 'NameI',
                queryMode: 'local',
                tpl: Ext.create('Ext.XTemplate',
                  '<ul class="x-list-plain"><tpl for=".">',
                  '<li role="option" class="x-boundlist-item">{NameI} Банк {BankI} Р/с {RAccI}</li>',
                  '</tpl></ul>'
                ),
                displayTpl: Ext.create('Ext.XTemplate',
                  '<tpl for=".">',
                  '{NameI} Банк {BankI} Р/с {RAccI}',
                  '</tpl>'
                ),
                selectOnFocus: true,
                listeners: {
                  'select': function (combo, record) {
                    var form = combo.up('form').getForm();
                    Ext.Array.forEach(Object.keys(record.data), function (item, index) {
                      form.findField(item).setValue(record.get(item));
                    })
                  }
                }
              }, {
                name: 'NameI',
                //fieldLabel: 'Наименование',
                labelAlign: 'top',
                readOnly: true
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                anchor: '100%',
                fieldDefaults: {
                  labelAlign: 'top'
                },
                defaultType: 'textfield',
                items: [{
                  name: 'BICI',
                  fieldLabel: 'БИК',
                  flex: 1,
                  margin: '0 10 0 0',
                  listeners: {
                    //'blur': this.onBlurBICI,
                    scope: this
                  },
                  readOnly: true
                }, {
                  name: 'BankI',
                  fieldLabel: 'Банк',
                  maxLength: 50,
                  flex: 2,
                  readOnly: true
                }]
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                anchor: '100%',
                fieldDefaults: {
                  labelAlign: 'top'
                },
                defaultType: 'textfield',
                items: [{
                  name: 'KAccI',
                  fieldLabel: 'Счет банка',
                  flex: 1,
                  margin: '0 10 0 0',
                  regex: /^\d{20}$/,
                  readOnly: true
                }, {
                  name: 'RAccI',
                  fieldLabel: 'Расч. счет',
                  flex: 1,
                  regex: /^\d{20}$/,
                  readOnly: true
                }]
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  xtype: 'textfield',
                  name: 'INNI',
                  fieldLabel: 'ИНН',
                  labelWidth: 30,
                  labelAlign: 'left',
                  regex: /^(\d{10}|\d{12})$/,
                  readOnly: true
                }, {
                  xtype: 'textfield',
                  name: 'KPPI',
                  fieldLabel: 'КПП',
                  labelWidth: 40,
                  regex: /^\d{9}$/,
                  readOnly: true
                }]
              }]
            }, {
              xtype: 'fieldset',
              title: 'Получатель',
              defaults: {
                labelWidth: 89,
                layout: {
                  type: 'hbox',
                  defaultMargins: { top: 0, right: 5, bottom: 0, left: 0 }
                }
              },
              defaultType: 'textfield',
              bodyPadding: 10,
              items: [{
                name: 'NameO'
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                anchor: '100%',
                fieldDefaults: {
                  labelAlign: 'top'
                },
                defaultType: 'textfield',
                items: [{
                  name: 'BICO',
                  fieldLabel: 'БИК',
                  flex: 1,
                  margin: '0 10 0 0',
                  listeners: {
                    'blur': this.onBlurBICO,
                    scope: this
                  }
                }, {
                  name: 'BankO',
                  fieldLabel: 'Банк',
                  maxLength: 50,
                  flex: 2
                }]
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                anchor: '100%',
                fieldDefaults: {
                  labelAlign: 'top'
                },
                defaultType: 'textfield',
                items: [{
                  name: 'KAccO',
                  fieldLabel: 'Счет банка',
                  flex: 1,
                  margin: '0 10 0 0',
                  regex: /^\d{20}$/
                }, {
                  name: 'RAccO',
                  fieldLabel: 'Расч. счет',
                  flex: 1,
                  regex: /^\d{20}$/
                }]
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  xtype: 'textfield',
                  name: 'INNO',
                  fieldLabel: 'ИНН',
                  labelWidth: 30,
                  labelAlign: 'left',
                  regex: /^(\d{10}|\d{12})$/
                }, {
                  xtype: 'textfield',
                  name: 'KPPO',
                  fieldLabel: 'КПП',
                  labelWidth: 40,
                  regex: /^\d{9}$/
                }]
              }]
            }, {
              xtype: 'fieldcontainer',
              layout: 'hbox',
              items: [{
                xtype: 'numberfield',
                minValue: 0,
                name: 'Amount',
                fieldLabel: 'Сумма',
                allowBlank: false,
                hideTrigger: true,
                keyNavEnabled: false,
                mouseWheelEnabled: false,
                decimalPrecision: 2,
                decimalSeparator: '.',
                labelWidth: 50,
                labelAlign: 'left'
              }, {
                xtype: 'numberfield',
                minValue: 0,
                name: 'Queue',
                fieldLabel: 'Очередность',
                allowBlank: false,
                hideTrigger: true,
                keyNavEnabled: false,
                mouseWheelEnabled: false,
                decimalPrecision: 0,
                decimalSeparator: '.',
                width: 130
              }]
            }, {
              name: 'Reference',
              fieldLabel: 'Назначение',
              labelAlign: 'top'
            }]
          }],
          buttons: [{
            itemId: 'save',
            text: 'Сохранить',
            disabled: true,
            scope: this,
            handler: this.onSave
          }, {
            text: 'Отмена',
            scope: this,
            handler: this.onCancel
          }]
        });
        this.callParent();
      },

      setActiveRecord: function (record) {
        var me = this;
        me.activeRecord = record;
        if (record) {
          me.down('#save').enable();
          me.down('form').getForm().loadRecord(record);
        } else {
          me.down('#save').disable();
          me.down('form').getForm().reset();
        }
      },

      onSave: function () {
        var active = this.activeRecord, form = this.down('form').getForm();
        if (!active) {
          return;
        }
        if (form.isValid()) {
          if (this.title == 'Добавить')
            this.fireEvent('create', this, form.getValues(false, false, false, true));
          else {
            form.updateRecord(active);
            this.fireEvent('update');
          }
          this.hide();
        }
      },

      onBlurBICI: function (bic) {
        this.onBlurBIC(bic, 'I');
      },

      onBlurBICO: function (bic) {
        this.onBlurBIC(bic, 'O');
      },

      onBlurBIC: function (bic, type) {
        var me = this;
        var form = me.down('form').getForm();
        var Bank = form.findField('Bank' + type);
        var KAcc = form.findField('KAcc' + type);
        Bank.setDisabled(true);
        KAcc.setDisabled(true);
        Ext.Ajax.request({
          url: '@Url.Action("GetBankByBIC")',
          timeout: 60000,
          params: {
            BIC: bic.getValue()
          },
          success: function (response) {
            var jr = Ext.decode(response.responseText)
            if (jr.success === true) {

              if (jr.data) {
                Bank.setValue(jr.data.Name);
                KAcc.setValue(jr.data.Account);
              }
              else {
                Bank.setValue('');
                KAcc.setValue('');
              }
            }
            Bank.setDisabled(false);
            KAcc.setDisabled(false);
          },
          failure: function (response) {
            var text = response.responseText;
            Bank.setDisabled(false);
            KAcc.setDisabled(false);
            alert('Ошибка!');
          }
        });
      },

      onCancel: function () {
        this.hide();
      }
    });

    Ext.define('Payment.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.pmtgrid',
      initComponent: function () {
        Ext.apply(this, {
          wini: null,
          defaultType: 'textfield',
          invalidateScrollerOnRefresh: false,
          layoutConfig: { labelSeparator: '' },
          viewConfig: {
            preserveScrollOnRefresh: true,
            enableTextSelection: true
          },
          plugins: 'gridfilters',
          selModel: {
            type: 'checkboxmodel',
            checkOnly: false
          },
          columns: [{
            header: 'Номер',
            dataIndex: 'Number',
            width: 70,
            filter: {
            }
          }, {
            header: 'Дата',
            xtype: 'datecolumn',
            format: 'd.m.Y',
            dataIndex: 'PayDate',
            width: 88,
            filter: {
            }
          }, {
            text: 'Плательщик',
            columns: [{
              header: 'БИК',
              dataIndex: 'BICI',
              width: 88,
              filter: {
                type: 'list'
              }
            }, {
              header: 'Банк',
              dataIndex: 'BankI',
              width: 150,
              filter: {
                type: 'list'
              }
            }, {
              header: 'Счет банка',
              dataIndex: 'KAccI',
              width: 165
            }, {
              header: 'Р/с',
              dataIndex: 'RAccI',
              width: 165,
              filter: {
              }
            }, {
              header: 'ИНН',
              dataIndex: 'INNI',
              width: 95,
              filter: {
              }
            }, {
              header: 'КПП',
              dataIndex: 'KPPI',
              width: 88,
              tdCls: 'wrap-text',
              filter: {
              }
            }, {
              header: 'Наименование',
              dataIndex: 'NameI',
              width: 165,
              filter: {
              }
            }]
          }, {
            text: 'Получатель',
            columns: [{
              header: 'БИК',
              dataIndex: 'BICO',
              width: 88,
              filter: {
                type: 'list'
              }
            }, {
              header: 'Банк',
              dataIndex: 'BankO',
              width: 150,
              filter: {
                type: 'list'
              }
            }, {
              header: 'Счет банка',
              dataIndex: 'KAccO',
              width: 165
            }, {
              header: 'Р/с',
              dataIndex: 'RAccO',
              width: 165,
              filter: {
              }
            }, {
              header: 'ИНН',
              dataIndex: 'INNO',
              width: 110,
              filter: {
              }
            }, {
              header: 'КПП',
              dataIndex: 'KPPO',
              width: 88,
              tdCls: 'wrap-text',
              filter: {
              }
            }, {
              header: 'Наименование',
              dataIndex: 'NameO',
              width: 165,
              filter: {
              }
            }]
          }, {
            header: 'Сумма',
            dataIndex: 'Amount',
            width: 90,
            isExport: false
          }, {
            header: 'Очередность',
            dataIndex: 'Queue',
            width: 30,
            isExport: false
          }, {
            header: 'Назначение',
            dataIndex: 'Reference',
            width: 300
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
              xtype: 'tbtext', text: ' Период: '
            }, {
              xtype: 'datefield',
              itemId: 'd1',
              allowBlank: false,
              format: 'd.m.Y',
              vtype: 'daterange',
              endDateField: 'd2',
              startDay: 1,
              value: Ext.Date.add(Ext.Date.clearTime(new Date(), false), Ext.Date.DAY, 0),
              width: 100
            }, ' ', {
              xtype: 'datefield',
              itemId: 'd2',
              allowBlank: false,
              format: 'd.m.Y',
              vtype: 'daterange',
              startDateField: 'd1',
              startDay: 1,
              value: Ext.Date.add(Ext.Date.clearTime(new Date(), false), Ext.Date.DAY, 0),
              width: 100,
              margin: '0 5 0 0'
            }, {
              iconCls: 'icon-refresh',
              text: 'Обновить',
              scope: this,
              handler: this.onRefreshClick
            }, {
              iconCls: 'icon-user-add',
              text: 'Добавить',
              scope: this,
              handler: this.onAddClick
            }, {
              text: 'Изменить',
              disabled: true,
              itemId: 'change',
              scope: this,
              handler: this.onChangeClick
            }, {
              iconCls: 'icon-delete',
              text: 'Удалить',
              disabled: true,
              itemId: 'delete',
              scope: this,
              handler: this.onDeleteClick
            }, {
              xtype: 'exporterbutton',
              text: 'Экспорт',
              action: '@Url.Action("ExportExcel", "Home", new { area = "" })',
              file: 'Доверенности.xml'
            }, {
              text: 'Очистить фильтр',
              itemId: 'clearFilter',
              scope: this,
              handler: this.onClearFilterClick
            }, {
              text: 'Выгрузить',
              disabled: true,
              itemId: 'unload',
              scope: this,
              handler: this.onUnloadClick
            }]
          }]
        });
        this.callParent();
        this.getSelectionModel().on('selectionchange', this.onSelectChange, this);
      //  this.on('itemdblclick', this.onRowDblClick, this) ;
      },

      onRefreshClick: function () {
        var me = this;
        me.store.proxy.extraParams = { d1: me.down('#d1').getValue(), d2: me.down('#d2').getValue() };
        me.store.load();
      },

      onSelectChange: function (selModel, selections) {
        this.down('#delete').setDisabled(selections.length === 0);
        this.down('#change').setDisabled(selections.length === 0);
        this.down('#unload').setDisabled(selections.length === 0);
      },

      onUnloadClick: function () {
        var sm = this.getView().getSelectionModel().selected.getRange();
        if (sm.length > 0) {
          var p = [];
          for (i = 0; i < sm.length; i++) {
            p.push("[" + i + "]="+sm[i].get('ID'));
          }
        }
        window.location.assign("@Url.Action("Unload")?" + p.join("&"));
      },

      onCreateWin: function () {
        this.wini = Ext.create('Payment.Win', {
          scope: this,
          listeners: {
            scope: this,
            create: function (form, data) {
              this.store.insert(0, data);
              this.store.sync();
            },
            update: function () {
              this.store.sync();
            }
          }
        });
      },

      onAddClick: function () {
        var rec = Ext.create('Payment', {
          PayDate: Ext.Date.clearTime(new Date(), false)
        });
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Добавить');
        this.wini.setActiveRecord(rec);
        this.wini.show(this);
      },

      onChangeClick: function () {
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Изменить');
        this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
        this.wini.show(this);
      },

      onRowDblClick: function () {
        this.onChangeClick();
      },

      onSync: function () {
        this.store.sync();
      },

      onDeleteClick: function () {
        var selection = this.getView().getSelectionModel().getSelection()[0];
        if (selection) {
          if (window.confirm('Удалить стр.?')) {
            this.store.remove(selection);
            this.onSync();
          }
        }
      },

      onClearFilterClick: function () {
        this.filters.clearFilters();
      }
    });

    Ext.onReady(function () {
      Ext.tip.QuickTipManager.init();
      Ext.create('Ext.Viewport', {
        layout: 'border',
        items: [{
          region: 'north',
          border: false,
          contentEl: 'header'
        }, {
          region: 'center',
          itemId: 'grid',
          border: false,
          xtype: 'pmtgrid',
          store: 'storepmt'
        }]
      });
    });
  </script>
}


