@{
  ViewBag.Title = "Справочники";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts {
  <style type="text/css">
    .upload-icon
    {
      background-image: url(@Href("~/Content/images/image_add.png")) !important;
    }
    .file-uploads-image-add:before {
      font: 16px/1 'Font Awesome 5 Free';
      content: '\f1c5'
    }
    .icon-refresh
    {
      background-image: url(@Url.Content("~/Scripts/ExtJS62/build/classic/theme-crisp/resources/images/grid/refresh.png")) !important;
    }
  </style>
  <link rel="stylesheet" type="text/css" href="~/Scripts/ExtJS62/build/classic/theme-crisp/resources/theme-crisp-all.css" />
  <script type="text/javascript" src="~/Scripts/ExtJS62/ext-bootstrap.js"></script>

  <script type="text/javascript" src="~/Scripts/ExtJS62/build/classic/locale/locale-ru.js"></script>
  <script type="text/javascript" src="~/Scripts/ExtJS62/ux/Exporter.js"></script>

  <script type="text/javascript">

    Ext.override(Ext.form.field.ComboBox, {
      assertValue: function () {
        var me = this,
            value = me.getRawValue(),
            rec;

        if (me.multiSelect) {
          // For multiselect, check that the current displayed value matches the current
          // selection, if it does not then revert to the most recent selection.
          if (value !== me.getDisplayValue()) {
            me.setValue(me.lastSelection);
          }
        } else {
          // For single-select, match the displayed value to a record and select it,
          // If no value and we're allowing blank, clear the current value.
          // if it does not match a record then revert to the most recent selection.
          if (!value.length && me.allowBlank) {
            me.setValue(null);
          } else {
            rec = me.findRecordByDisplay(value);
            if (rec) {
              me.select(rec);
            } else {
              me.setValue(me.lastSelection);
            }
          }
        }
        me.collapse();
      }
    });

    Ext.onReady(function () {
      Ext.tip.QuickTipManager.init();

      Ext.define('Client', {
        extend: 'Ext.data.Model',
        idProperty: 'FinInstID',
        fields: [
          { name: 'FinInstID', type: 'int' },
          { name: 'Name', type: 'string' },
          { name: 'INN', type: 'string' },
          { name: 'KPP', type: 'string' },
          { name: 'Name1', type: 'string' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          api: {
            read: '@Url.Action("getClientList")',
            create: '@Url.Action("addFinInst")',
            update: '@Url.Action("updFinInst")',
            destroy: '@Url.Action("delFinInst")'
          },
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          writer: {
            type: 'json',
            rootProperty: 'data',
            writeAllFields: true,
            allowSingle: false,
            encode: false
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        model: 'Client',
        storeId: 'storeEmit',
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getEmitentList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeClient',
        model: 'Client'
      });

      Ext.define('Treaty', {
        extend: 'Ext.data.Model',
        idProperty: 'TreatyID',
        fields: [
          { name: 'TreatyID', type: 'int' },
          { name: 'Name', type: 'string' },
          { name: 'ClientName', type: 'string', persist: false },
          { name: 'FinInstID', type: 'int' },
          { name: 'IsDisabled', type: 'boolean', defaultValue: false },
          { name: 'DateStart', type: 'date', dateFormat: 'c' },
          { name: 'DateFinish', type: 'date', dateFormat: 'c' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          api: {
            read: '@Url.Action("getTreatyList")',
            create: '@Url.Action("addTreaty")',
            update: '@Url.Action("updTreaty")',
            destroy: '@Url.Action("delTreaty")'
          },
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          writer: {
            type: 'json',
            rootProperty: 'data',
            writeAllFields: true,
            allowSingle: false,
            encode: false
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeTreaty',
        model: 'Treaty'
      });

      Ext.define('DepoTreaty', {
        extend: 'Ext.data.Model',
        idProperty: 'ID',
        fields: [
          { name: 'ID', type: 'int' },
          { name: 'Number', type: 'string' },
          { name: 'Client', type: 'string' },
          { name: 'DateStart', type: 'date', dateFormat: 'c' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getDepoTreatyList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          }
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeDepoTreaty',
        model: 'DepoTreaty'
      });

      Ext.define('PortfolioTreaty', {
        extend: 'Ext.data.Model',
        idProperty: 'ID',
        fields: [
          { name: 'ID', type: 'int' },
          { name: 'PortfolioID', type: 'int' },
          { name: 'TreatyID', type: 'int' },
          { name: 'DateStart', type: 'date', dateFormat: 'c' },
          { name: 'DateFinish', type: 'date', dateFormat: 'c' },
          { name: 'Name', type: 'string', persist: false },
          { name: 'TypeName', type: 'string', persist: false }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          api: {
            read: '@Url.Action("getPortfolioTreatyList")',
            create: '@Url.Action("addPortfolioTreaty")',
            update: '@Url.Action("updPortfolioTreaty")',
            destroy: '@Url.Action("delTreatyPortfolio")'
          },
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          writer: {
            type: 'json',
            rootProperty: 'data',
            writeAllFields: true,
            allowSingle: false,
            encode: false
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storePortfolioTreaty',
        model: 'PortfolioTreaty'
      });

      Ext.define('Portfolio', {
        extend: 'Ext.data.Model',
        idProperty: 'PortfolioID',
        fields: [
          { name: 'PortfolioID', type: 'int' },
          { name: 'Name', type: 'string' },
          { name: 'PortfolioTypeID', type: 'int' },
          { name: 'PortfolioType', type: 'string', persist: false }
        ]
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storePortfolio',
        model: 'Portfolio',
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getPortfolioList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storePortType',
        idProperty: 'PortfolioTypeID',
        fields: [
          { name: 'PortfolioTypeID', type: 'int' },
          { name: 'Name', type: 'string' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getPortfolioTypeList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeSec',
        idProperty: 'SecurityID',
        fields: [
          { name: 'SecurityID', type: 'int' },
          { name: 'Name', type: 'string' },
          { name: 'ISIN', type: 'string' },
          { name: 'SecType', type: 'string' },
          { name: 'DateEnd', type: 'date', dateFormat: "c", persist: false },
          { name: 'Issuer', type: 'string' },
          { name: 'IssuerINN', type: 'string' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getSec")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.define('Client.Win', {
        extend: 'Ext.window.Window',
        alias: 'widget.clientwin',

        initComponent: function () {
          Ext.apply(this, {
            width: 600,
            closeAction: 'hide',
            modal: true,
            buttonAlign: 'center',
            items: [{
              xtype: 'form',
              border: false,
              defaults: { anchor: '100%' },
              bodyPadding: 10,
              activeRecord: null,
              fieldDefaults: {
                labelAlign: 'right',
                msgTarget: 'side'
              },
              items: [{
                name: 'Name',
                fieldLabel: 'Наименование',
                xtype: 'textfield',
                allowBlank: false
              }]
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'bottom',
              ui: 'footer',
              items: ['->', {
                iconCls: 'icon-save',
                itemId: 'save',
                text: 'Сохранить',
                disabled: true,
                scope: this,
                handler: this.onSave
              }, {
                  //iconCls: 'icon-cancel',
                  text: 'Отмена',
                  scope: this,
                  handler: this.onCancel
                }]
            }]
          });
          this.callParent();
        },

        setActiveRecord: function (record) {
          this.activeRecord = record;
          if (record) {
            this.down('#save').enable();
            this.down('form').getForm().loadRecord(record);
          } else {
            this.down('#save').disable();
            this.down('form').getForm().reset();
          }
        },

        onSave: function () {
          var active = this.activeRecord, form = this.down('form').getForm();
          if (!active) {
            return;
          }
          if (form.isValid()) {
            if (this.title == 'Добавить')
              this.fireEvent('create', this, form.getValues(false, false, false, true));
            else {
              form.updateRecord(active);
              this.fireEvent('update');
            }
            this.hide();
          }
        },

        onCancel: function () {
          this.hide();
        }
      });

      Ext.define('ClientGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.clientgrid',
        initComponent: function () {
          Ext.apply(this, {
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              flex: 1
            }, {
              dataIndex: 'INN',
              header: 'ИНН',
              width: 110
            }, {
              dataIndex: 'KPP',
              header: 'КПП',
              width: 110
            }, {
              dataIndex: 'Name1',
              header: 'Наименование2',
              flex: 1
            }, {
              dataIndex: 'FinInstID',
              header: 'ID',
              width: 80
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, {
                xtype: 'tbtext',
                text: ' Все: '
              }, {
                xtype: 'checkbox',
                itemId: 'cbAll'
              }, '-', {
                iconCls: 'icon-refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }, {
                iconCls: 'icon-add',
                text: 'Добавить',
                scope: this,
                handler: this.onAddClick
              }, {
                text: 'Изменить',
                disabled: true,
                itemId: 'change',
                scope: this,
                handler: this.onChangeClick
              }, {
                iconCls: 'icon-delete',
                text: 'Удалить',
                disabled: true,
                itemId: 'delete',
                scope: this,
                handler: this.onDeleteClick
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                //beforerender: {
                //  fn: this.onRefreshClick
                //},
                itemdblclick: {
                  fn: this.onSelect
                },
                itemclick: {
                  fn: this.onSelectChange
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = {
            filter: this.down('#tfFind').getValue(),
            all: this.down('#cbAll').getValue(),
          };
          this.store.load();
        },

        onSelectChange: function (selModel, selections) {
          this.down('#delete').setDisabled(selections.length === 0);
          this.down('#change').setDisabled(selections.length === 0);
        },

        onAddClick: function () {
          var rec = Ext.create('Client', { Name: '' });
          if (!this.wini) {
            this.onCreateWin();
          }
          this.wini.setTitle('Добавить');
          this.wini.setActiveRecord(rec);
          this.wini.show(this);
        },

        onChangeClick: function () {
          if (!this.wini) {
            this.onCreateWin();
          }
          this.wini.setTitle('Изменить');
          this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
          this.wini.show(this);
        },

        onCreateWin: function () {
          this.wini = Ext.create('Client.Win', {
            scope: this,
            listeners: {
              scope: this,
              create: function (form, data) {
                this.store.insert(0, data);
                this.store.sync();
              },
              update: function () {
                this.store.sync();
              }
            }
          });
        },

        onDeleteClick: function () {
          var me = this;
          var selection = this.getView().getSelectionModel().getSelection()[0];
          if (selection) {
            if (window.confirm('Удалить стр.?')) {
              selection.dropped = true;
              selection.save({
                success: function () {
                  me.store.remove(selection);
                },
                failure: function () {
                  selection.dropped = false;
                  Ext.Msg.alert('Error', 'Запись не удалена.');
                }
              });
            }
          }
          //var selection = this.getView().getSelectionModel().getSelection()[0];
          //if (selection) {
          //  if (window.confirm('Удалить стр.?')) {
          //    this.store.remove(selection);
          //    this.store.sync();
          //  }
          //}
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('FinInstID'));
          return false;
        }
      });

      Ext.define('Treaty.Win', {
        extend: 'Ext.window.Window',
        alias: 'widget.treatywin',

        initComponent: function () {
          Ext.apply(this, {
            width: 600,
            closeAction: 'hide',
            modal: true,
            buttonAlign: 'center',
            items: [{
              xtype: 'form',
              border: false,
              defaults: { anchor: '100%' },
              bodyPadding: 10,
              activeRecord: null,
              fieldDefaults: {
                labelAlign: 'right',
                msgTarget: 'side'
              },
              items: [{
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  xtype: 'checkbox',
                  name: 'IsDisabled',
                  fieldLabel: 'Недействующий',
                  labelAlign: 'right',
                  labelWidth: 100,
                  margin: '0 15 0 0'
                }, {
                  xtype: 'datefield',
                  format: 'd.m.Y',
                  flex: 1,
                  name: 'DateStart',
                  fieldLabel: 'Начало',
                  margin: '0 15 0 0'
                }, {
                  xtype: 'datefield',
                  format: 'd.m.Y',
                  flex: 1,
                  name: 'DateFinish',
                  fieldLabel: 'Окончание'
                }]
              }, {
                name: 'Name',
                fieldLabel: 'Наименование',
                xtype: 'textfield',
                allowBlank: false
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  name: 'ClientName',
                  fieldLabel: 'Клиент',
                  xtype: 'textfield',
                  readOnly: true,
                  allowBlank: false,
                  flex: 1
                }, {
                  xtype: 'button',
                  text: 'Выбрать',
                  scope: this,
                  handler: this.onShowType
                }]
              }, {
                xtype: 'hidden',
                name: 'FinInstID'
              }, {
                xtype: 'hidden',
                name: 'InvestDeclID'
              }]
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'bottom',
              ui: 'footer',
              items: ['->', {
                iconCls: 'icon-save',
                itemId: 'save',
                text: 'Сохранить',
                disabled: true,
                scope: this,
                handler: this.onSave
              }, {
                  //iconCls: 'icon-cancel',
                  text: 'Отмена',
                  scope: this,
                  handler: this.onCancel
                }]
            }]
          });
          this.callParent();
        },

        onShowType: function () {
          var w = Ext.create('Ext.window.Window', {
            scope: this,
            title: 'Клиенты',
            modal: true,
            width: 1000,
            height: window.innerHeight,
            layout: 'fit',
            items: [{
              xtype: 'clientgrid',
              store: 'storeClient'
            }],
            listeners: {
              scope: this,
              sel: function (text, id) {
                //console.log(data);
                this.down('form').getForm().findField('ClientName').setValue(text);
                this.down('form').getForm().findField('FinInstID').setValue(id);
                w.close();
              }
            }
          }).show(this);
        },

        setActiveRecord: function (record) {
          this.activeRecord = record;
          if (record) {
            this.down('#save').enable();
            this.down('form').getForm().loadRecord(record);
          } else {
            this.down('#save').disable();
            this.down('form').getForm().reset();
          }
        },

        onSave: function () {
          var active = this.activeRecord, form = this.down('form').getForm();
          if (!active) {
            return;
          }
          if (form.isValid()) {
            if (this.title == 'Добавить')
              this.fireEvent('create', this, form.getValues(false, false, false, true));
            else {
              form.updateRecord(active);
              this.fireEvent('update');
            }
            this.hide();
          }
        },

        onCancel: function () {
          this.hide();
        }
      });

      Ext.define('TreatyGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.treatygrid',
        initComponent: function () {
          Ext.apply(this, {
            store: 'storeTreaty',
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              flex: 1
            }, {
              dataIndex: 'ClientName',
              header: 'Клиент',
              flex: 1
            }, {
              dataIndex: 'TreatyID',
              header: 'ID',
              width: 80
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, '-', {
                iconCls: 'icon-refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }, {
                iconCls: 'icon-add',
                text: 'Добавить',
                scope: this,
                handler: this.onAddClick
              }, {
                text: 'Изменить',
                disabled: true,
                itemId: 'change',
                scope: this,
                handler: this.onChangeClick
              }, {
                iconCls: 'icon-delete',
                text: 'Удалить',
                disabled: true,
                itemId: 'delete',
                scope: this,
                handler: this.onDeleteClick
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                //beforerender: {
                //  fn: this.onRefreshClick
                //},
                itemdblclick: {
                  fn: this.onSelect
                },
                itemclick: {
                  fn: this.onSelectChange
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = {
            filter: this.down('#tfFind').getValue()
          };
          this.store.load();
        },

        onSelectChange: function (selModel, selections) {
          this.down('#delete').setDisabled(selections.length === 0);
          this.down('#change').setDisabled(selections.length === 0);
          var grid = this.up('panel').down('#portftreaty');
          if (grid) {
            if (selections.length === 0) {
              grid.down('#create').setDisabled(true);
            }
            else {
              grid.store.proxy.extraParams = { TreatyID: this.getView().getSelectionModel().getSelection()[0].get('TreatyID'), PortfolioTypeID: grid.down('#cbType').getValue() };
              grid.store.load();
              grid.down('#create').setDisabled(false);
            }
          }
        },

        onAddClick: function () {
          var rec = Ext.create('Treaty', { IsDisabled: false, DateStart: Ext.Date.add(Ext.Date.clearTime(new Date(), false), Ext.Date.DAY, 0), DateFinish: Ext.Date.clearTime(new Date(2050, 11, 31), false) });
          if (!this.wini) {
            this.onCreateWin();
          }
          this.wini.setTitle('Добавить');
          this.wini.setActiveRecord(rec);
          this.wini.show(this);
        },

        onChangeClick: function () {
          if (!this.wini) {
            this.onCreateWin();
          }
          this.wini.setTitle('Изменить');
          this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
          this.wini.show(this);
        },

        onCreateWin: function () {
          this.wini = Ext.create('Treaty.Win', {
            scope: this,
            listeners: {
              scope: this,
              create: function (form, data) {
                this.store.insert(0, data);
                this.store.sync();
              },
              update: function () {
                this.store.sync();
              }
            }
          });
        },

        onDeleteClick: function () {
          var me = this;
          var selection = this.getView().getSelectionModel().getSelection()[0];
          if (selection) {
            if (window.confirm('Удалить стр.?')) {
              selection.dropped = true;
              selection.save({
                success: function () {
                  me.store.remove(selection);
                },
                failure: function () {
                  selection.dropped = false;
                  Ext.Msg.alert('Error', 'Запись не удалена.');
                }
              });
            }
          }
          //var selection = this.getView().getSelectionModel().getSelection()[0];
          //if (selection) {
          //  if (window.confirm('Удалить стр.?')) {
          //    this.store.remove(selection);
          //    this.store.sync();
          //  }
          //}
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('TreatyID'));
          return false;
        }
      });

      Ext.define('DepoTreatyGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.dtgrid',
        initComponent: function () {
          Ext.apply(this, {
            store: 'storeDepoTreaty',
            columns: [{
              dataIndex: 'Number',
              header: 'Номер',
              flex: 1
            }, {
              dataIndex: 'Client',
              header: 'Клиент',
              flex: 3
            }, {
              dataIndex: 'DateStart',
              header: 'Открыт',
              xtype: 'datecolumn',
              format: 'd.m.Y',
              width: 100
            }, {
              dataIndex: 'ID',
              header: 'ID',
              width: 60
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, '-', {
                iconCls: 'icon-refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
                }, {
                  //iconCls: 'icon-refresh',
                  text: 'Загрузить',
                  handler: this.onLoadClick,
                  scope: this
                }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                //beforerender: {
                //  fn: this.onRefreshClick
                //},
                itemdblclick: {
                  fn: this.onSelect
                },
                itemclick: {
                  fn: this.onSelectChange
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = {
            filter: this.down('#tfFind').getValue()
          };
          this.store.load();
        },

        onLoadClick: function () {
          if (!this.winf) {
            this.winf = Ext.create('File.Win', {
              scope: this,
              listeners: {
                scope: this,
                add: function () {
                  this.store.load();
                }
              }
            });
          }
          this.winf.show(this);
        }

      });

      Ext.define('File.Win', {
        extend: 'Ext.window.Window',
        alias: 'widget.filewin',
        initComponent: function () {
          Ext.apply(this, {
            title: 'Загрузка договоров Депо',
            width: 400,
            closeAction: 'hide',
            layout: 'fit',
            modal: true,
            autoHeight: true,
            plain: true,
            buttonAlign: 'center',
            border: true,
            items: [{
              xtype: 'form',
              bodyPadding: 10,
              defaults: { anchor: '100%' },
              defaultType: 'textfield',
              border: false,
              waitMsgTarget: true,
              layoutConfig: { labelSeparator: '' },
              fieldDefaults: { labelWidth: 100, labelAlign: 'left' },
              items: [{
                xtype: 'filefield',
                emptyText: 'Выбор файла',
                name: 'fn',
                fieldLabel: 'Загрузка',
                hideLabel: true,
                buttonText: '',
                buttonConfig: {
                  iconCls: 'file-uploads-image-add'
                },
              }],
              buttons: [{
                text: 'Отправить',
                handler: function () {
                  var me = this
                  var form = me.up('form').getForm();
                  if (form.isValid()) {
                    form.submit({
                      url: '@Url.Action("DepoTreatyUpload")',
                      waitMsg: 'Отправка файла...',
                      waitMsgTarget: true,
                      success: function (fp, o) {
                        alert('Файл "' + o.result.file + '" загружен');
                        me.up('window').fireEvent('add');
                        me.up('window').hide();
                      },
                      failure: function (fp, o) {
                        alert('Ошибка');
                      }
                    });
                  }
                }
              }, {
                  text: 'Выход',
                  scope: this,
                  handler: this.onExit
              }],
              listeners: {
              }
            }]
            //,
            //dockedItems: [{
            //  xtype: 'toolbar',
            //  dock: 'bottom',
            //  ui: 'footer',
            //  items: ['->', {
            //    text: 'Выход',
            //    scope: this,
            //    handler: this.onExit
            //  }]
            //}]
          });
          this.callParent();
        },

        onExit: function () {
          this.hide();
        }
      });

      Ext.define('TreatyPortfolio.Win', {
        extend: 'Ext.window.Window',
        alias: 'widget.treatyportfoliowin',

        initComponent: function () {
          Ext.apply(this, {
            width: 600,
            //closeAction: 'hide',
            modal: true,
            buttonAlign: 'center',
            items: [{
              xtype: 'form',
              border: false,
              //height: 300,
              defaults: { anchor: '100%' },
              bodyPadding: 10,
              activeRecord: null,
              fieldDefaults: {
                labelAlign: 'right',
                msgTarget: 'side'
              },
              items: [{
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  xtype: 'datefield',
                  format: 'd.m.Y',
                  width: 250,
                  name: 'DateStart',
                  fieldLabel: 'Начиная с даты'
                }]
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  name: 'Name',
                  fieldLabel: 'Портфель',
                  xtype: 'textfield',
                  readOnly: true,
                  allowBlank: false,
                  flex: 1
                }, {
                  xtype: 'button',
                  text: 'Выбрать',
                  scope: this,
                  handler: this.onShowType
                }]
              }, {
                xtype: 'hidden',
                name: 'PortfolioID'
              }, {
                xtype: 'hidden',
                name: 'TreatyID'
              }]
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'bottom',
              ui: 'footer',
              items: ['->', {
                iconCls: 'icon-save',
                itemId: 'save',
                text: 'Сохранить',
                disabled: true,
                scope: this,
                handler: this.onSave
              }, {
                  text: 'Выход',
                  scope: this,
                  handler: this.onExit
                }]
            }]
          });
          this.callParent();
        },

        onShowType: function () {
          var w = Ext.create('Ext.window.Window', {
            scope: this,
            title: this.portType,
            modal: true,
            width: 1000,
            height: window.innerHeight,
            layout: 'fit',
            items: [{
              xtype: 'portfoliogrid',
              portfolioTypeId: this.portfolioTypeId
            }],
            listeners: {
              scope: this,
              sel: function (text, id) {
                this.down('form').getForm().findField('Name').setValue(text);
                this.down('form').getForm().findField('PortfolioID').setValue(id);
                w.close();
              }
            }
          }).show(this);
        },

        setActiveRecord: function (record) {
          this.activeRecord = record;
          if (record) {
            this.down('#save').enable();
            this.down('form').getForm().loadRecord(record);
          } else {
            this.down('#save').disable();
            this.down('form').getForm().reset();
          }
        },

        onSave: function () {
          var me = this;
          var form = me.down('form').getForm();
          if (form.isValid()) {
            form.submit({
              jsonSubmit: false,
              url: '@Url.Action("addPortfolioTreaty")',
              success: function (f, a) {
                me.fireEvent('created');
                me.hide();
              },
              failure: function (f, a) {
                Ext.Msg.alert('Error', 'Изменения не записаны. Проверьте значения данных.');
              }
            });
          }
        },

        onExit: function () {
          this.hide();
        }
      });

      Ext.define('PortfolioGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.portfoliogrid',
        initComponent: function () {
          Ext.apply(this, {
            store: 'storePortfolio',
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              flex: 3
            }, {
              dataIndex: 'PortfolioType',
              header: 'Тип',
              flex: 1
            }, {
              dataIndex: 'PortfolioID',
              header: 'ID',
              width: 20
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, ' ', {
                iconCls: 'icon-refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: {
                  fn: this.onRefreshClick
                },
                itemdblclick: {
                  fn: this.onSelect
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = { TypeID: this.portfolioTypeId, filter: this.down('#tfFind').getValue() };
          this.store.load();
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('PortfolioID'));
          return false;
        }
      });

      Ext.define('PortfTreatyGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.portftreatygrid',
        initComponent: function () {
          Ext.apply(this, {
            columns: [{
              dataIndex: 'Name',
              header: 'Портфель',
              flex: 1
            }, {
              dataIndex: 'TypeName',
              header: 'Тип',
              flex: 1
            }, {
              header: 'Начало',
              xtype: 'datecolumn',
              format: 'd.m.Y',
              dataIndex: 'DateStart',
              width: 100
            }, {
              header: 'Конец',
              xtype: 'datecolumn',
              format: 'd.m.Y',
              dataIndex: 'DateFinish',
              width: 100
            }, {
              dataIndex: 'ID',
              header: 'ID',
              width: 30
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [' Тип: ', {
                itemId: 'cbType',
                xtype: 'combobox',
                store: 'storePortType',
                displayField: 'Name',
                valueField: 'PortfolioTypeID',
                typeAhead: true,
                queryMode: 'local',
                emptyText: '*',
                selectOnFocus: true,
                width: 180,
                listeners: {
                  beforerender: function () {
                    var me = this
                    this.store.load(function (records, operation, success) {
                      if (records.length > 0)
                        me.setValue(records[0].get('PortfolioTypeID'))
                    });
                  }
                }
              }, ' ', {
                  iconCls: 'icon-refresh',
                  text: 'Обновить',
                  handler: this.onRefreshClick,
                  scope: this
                }, {
                  iconCls: 'icon-add',
                  text: 'Добавить',
                  disabled: true,
                  itemId: 'create',
                  scope: this,
                  handler: this.onAddClick
                }, {
                  iconCls: 'icon-delete',
                  text: 'Удалить',
                  disabled: true,
                  itemId: 'delete',
                  scope: this,
                  handler: this.onDeleteClick
                }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                //beforerender: {
                //  fn: this.onRefreshClick
                //},
                itemdblclick: {
                  fn: this.onSelect
                },
                itemclick: {
                  fn: this.onSelectChange
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams.PortfolioTypeID = this.down('#cbType').getValue()
          //};
          this.store.load();
        },

        onSelectChange: function (selModel, selections) {
          this.down('#delete').setDisabled(selections.length === 0);
        },

        onAddClick: function () {
          var rec = Ext.create('PortfolioTreaty', { TreatyID: this.store.proxy.extraParams.TreatyID, DateStart: Ext.Date.add(Ext.Date.clearTime(new Date(), false), Ext.Date.DAY, 0) });
          var wini = Ext.create('TreatyPortfolio.Win', {
            portfolioTypeId: this.down('#cbType').getValue(),
            portType: this.down('#cbType').getDisplayValue(),
            scope: this,
            listeners: {
              scope: this,
              created: function (form, data) {
                this.onRefreshClick();
              }
            }
          });
          wini.setTitle('Добавить');
          wini.setActiveRecord(rec);
          wini.show(this);
        },

        onDeleteClick: function () {
          var me = this;
          var selection = this.getView().getSelectionModel().getSelection()[0];
          if (selection) {
            if (window.confirm('Удалить стр.?')) {
              selection.dropped = true;
              selection.save({
                success: function () {
                  me.store.remove(selection);
                },
                failure: function () {
                  selection.dropped = false;
                  Ext.Msg.alert('Error', 'Запись не удалена.');
                }
              });
            }
          }
        },

        onDeleteClick1: function () {
          var me = this;
          var selection = this.getView().getSelectionModel().getSelection()[0];
          if (selection) {

            if (window.confirm('Удалить стр.?')) {
              Ext.Ajax.request({
                url: '@Url.Action("delPortfolioTreaty")',
                params: { id: selection.get('ID') },
                success: function (response) {
                  if (Ext.decode(response.responseText).success)
                    me.store.load(function () { me.getView().refreshSelection() });
                  else
                    Ext.Msg.alert('Error', 'Запись не удалена.');
                },
                failure: function (f, a) {
                  Ext.Msg.alert('Error', 'Ошибка при удалении.');
                }
              });
            }
          }
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('TreatyID'));
          return false;
        }
      });

      Ext.define('SecGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.secgrid',
        initComponent: function () {
          Ext.apply(this, {
            store: 'storeSec',
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              width: 300
            }, {
              dataIndex: 'ISIN',
              header: 'ISIN',
              width: 150
            }, {
              dataIndex: 'RegNumber',
              header: 'Рег.номер',
              width: 150
            }, {
              dataIndex: 'SecType',
              header: 'Тип'
            }, {
              dataIndex: 'DateEnd',
              header: 'Погашение',
              renderer: Ext.util.Format.dateRenderer('d.m.Y')
            }, {
              dataIndex: 'Issuer',
              header: 'Эмитент',
              width: 300
            }, {
              dataIndex: 'IssuerINN',
              header: 'ИНН'
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, '-', {
                iconCls: 'icon-refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                //beforerender: {
                //  fn: this.onRefreshClick
                //},
                itemdblclick: {
                  fn: this.onSelect
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = {
            filter: this.down('#tfFind').getValue()
          };
          this.store.load();
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('SecurityID'));
          return false;
        }
      });

      Ext.define('EmitGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.emitgrid',
        initComponent: function () {
          Ext.apply(this, {
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              flex: 1
            }, {
              dataIndex: 'INN',
              header: 'ИНН',
              width: 110
            }, {
              dataIndex: 'KPP',
              header: 'КПП',
              width: 110
            }, {
              dataIndex: 'Name1',
              header: 'Наименование2',
              flex: 1
            }, {
              dataIndex: 'FinInstID',
              header: 'ID',
              width: 20
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, '-', {
                iconCls: 'icon-refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                //beforerender: {
                //  fn: this.onRefreshClick
                //},
                itemdblclick: {
                  fn: this.onSelect
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = {
            filter: this.down('#tfFind').getValue()
          };
          this.store.load();
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('FinInstID'));
          return false;
        }
      });

      Ext.create('Ext.Viewport', {
        layout: 'border',
        items: [{
          region: 'north',
          border: false,
          contentEl: 'header'
        }, {
          xtype: 'tabpanel',
          tabPosition: 'top',
          region: 'center',
          activeTab: 0,
          frame: false,
          items: [{
            itemId: 'tcTreaty',
            title: 'Договоры',
            tag: 0,
            layout: 'border',
            items: [{
              region: 'center',
              xtype: 'treatygrid',
              store: 'storeTreaty'
            }, {
              region: 'south',
              xtype: 'portftreatygrid',
              store: 'storePortfolioTreaty',
              height: '20%',
              itemId: 'portftreaty',
              border: false,
              split: true
            }]
          }, {
            itemId: 'tcClient',
            title: 'Клиенты',
            tag: 1,
            layout: 'border',
            items: [{
              region: 'center',
              xtype: 'clientgrid',
              store: 'storeClient'
            }]
          }, {
            itemId: 'tcEmit',
            title: 'Эмитенты',
            tag: 2,
            layout: 'border',
            items: [{
              region: 'center',
              xtype: 'emitgrid',
              store: 'storeEmit'
            }]
          }, {
            itemId: 'tcSecurity',
            title: 'Бумаги',
            tag: 3,
            layout: 'border',
            items: [{
              region: 'center',
              xtype: 'secgrid',
              store: 'storeSec'
            }]
            }, {
              itemId: 'tcDepoTreaty',
              title: 'Договоры Депо',
              tag: 4,
              layout: 'border',
              items: [{
                region: 'center',
                xtype: 'dtgrid',
                store: 'storeDepoTreaty'
              }]
            }],
          listeners: {}
        }]
      });
    });
  </script>
}
