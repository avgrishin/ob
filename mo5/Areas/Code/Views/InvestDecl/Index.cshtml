@{
  ViewBag.Title = "Инвестиционная декларация";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts {
<style type="text/css">
    .icon-refresh
    {
      background-image: url(@Url.Content("~/Scripts/ExtJS62/build/classic/theme-crisp/resources/images/grid/refresh.png")) !important;
    }
    .gray-row .x-grid-cell {
      color: gray;
    }
</style>
  <link rel="stylesheet" type="text/css" href="~/Scripts/ExtJS62/build/classic/theme-crisp/resources/theme-crisp-all.css" />
  <script type="text/javascript" src="~/Scripts/ExtJS62/ext-bootstrap.js"></script>

  <script type="text/javascript" src="~/Scripts/ExtJS62/build/classic/locale/locale-ru.js"></script>
  <script type="text/javascript" src="~/Scripts/ExtJS62/ux/Exporter.js"></script>

  <script type="text/javascript">

    Ext.override(Ext.form.field.ComboBox, {
      assertValue: function () {
        var me = this,
          value = me.getRawValue(),
          rec;

        if (me.multiSelect) {
          // For multiselect, check that the current displayed value matches the current
          // selection, if it does not then revert to the most recent selection.
          if (value !== me.getDisplayValue()) {
            me.setValue(me.lastSelection);
          }
        } else {
          // For single-select, match the displayed value to a record and select it,
          // If no value and we're allowing blank, clear the current value.
          // if it does not match a record then revert to the most recent selection.
          if (!value.length && me.allowBlank) {
            me.setValue(null);
          } else {
            rec = me.findRecordByDisplay(value);
            if (rec) {
              me.select(rec);
            } else {
              me.setValue(me.lastSelection);
            }
          }
        }
        me.collapse();
      }
    });

    Ext.onReady(function () {
      Ext.tip.QuickTipManager.init();

      Ext.define('InvDecl', {
        extend: 'Ext.data.Model',
        idProperty: 'InvestDeclID',
        fields: [
          { name: 'InvestDeclID', type: 'int' },
          { name: 'Name' },
          { name: 'Comment', type: 'string' },
          { name: 'Enb', type: 'boolean', defaultValue: true },
          { name: 'InvestDeclTypeID', type: 'int' },
          { name: 'CreateDate', type: 'date', dateFormat: "c", persist: false },
          { name: 'ModifyDate', type: 'date', dateFormat: "c", persist: false },
          { name: 'Type', persist: false }
        ]
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeInvDecl',
        model: 'InvDecl',
        remoteSort: true,
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          api: {
            read: '@Url.Action("InvestDeclList")',
            create: '@Url.Action("addInvestDecl")',
            update: '@Url.Action("updInvestDecl")',
            destroy: '@Url.Action("delInvestDecl")'
          },
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          writer: {
            type: 'json',
            rootProperty: 'data',
            writeAllFields: true,
            allowSingle: false,
            encode: false
          },
          simpleSortMode: true
        }
      });

      Ext.define('InvDeclLink', {
        extend: 'Ext.data.Model',
        idProperty: 'InvestDeclLinkID',
        fields: [
          { name: 'InvestDeclLinkID', type: 'int' },
          { name: 'InvestDeclID', type: 'int' },
          { name: 'Enb', type: 'boolean', defaultValue: true },
          { name: 'DateStart', type: 'date', dateFormat: 'c' },
          { name: 'DateFinish', type: 'date', dateFormat: 'c' },
          { name: 'ObjID', type: 'int' },
          { name: 'ObjType', type: 'int' },
          { name: 'ObjTypeS', persist: false },
          { name: 'Name', persist: false }
        ]
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeInvDeclLink',
        model: 'InvDeclLink',
        remoteSort: true,
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          api: {
            read: '@Url.Action("InvestDeclLinkList")',
            create: '@Url.Action("addInvestDeclLink")',
            update: '@Url.Action("updInvestDeclLink")',
            destroy: '@Url.Action("delInvestDeclLink")'
          },
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          writer: {
            type: 'json',
            rootProperty: 'data',
            writeAllFields: true,
            allowSingle: false,
            encode: false
          },
          simpleSortMode: true
        }
      });

      Ext.define('InvDeclWhere', {
        extend: 'Ext.data.Model',
        idProperty: 'InvestDeclWhereID',
        fields: [
          { name: 'InvestDeclID', type: 'int' },
          { name: 'InvestDeclWhereID', type: 'int' },
          { name: 'NameWhere', type: 'string', allowBlank: false },
          { name: 'Enb', type: 'boolean' },
          { name: 'StartValue', type: 'number' },
          { name: 'StopValue', type: 'number' },
          { name: 'FLAG_Calculation', type: 'int' },
          { name: 'Calculation', type: 'string', persist: false },
          { name: 'FLAG_Group', type: 'int' },
          { name: 'Group', type: 'string', persist: false },
          { name: 'FLAG_Type', type: 'int' },
          { name: 'FLAG_Long', type: 'int' },
          { name: 'CreateDate', type: 'date', dateFormat: "c", persist: false },
          { name: 'ModifyDate', type: 'date', dateFormat: "c", persist: false }
        ]
      });

      Ext.define('InvDeclSec', {
        extend: 'Ext.data.Model',
        idProperty: 'InvestDeclSecID',
        fields: [
          { name: 'InvestDeclSecID', type: 'int' },
          { name: 'InvestDeclWhereID', type: 'int' },
          { name: 'FLAG_Div', type: 'int' },
          { name: 'FLAG_Not', type: 'int' },
          { name: 'Enb', type: 'boolean', defaultValue: true },
          { name: 'ObjType', type: 'int' },
          { name: 'ObjTypeS', type: 'string', persist: false },
          { name: 'ObjID', type: 'int' },
          { name: 'Name', type: 'string', persist: false }
        ]
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeCalc',
        fields: ['value', 'text'],
        data: [[0, 'Абсолютное'], [1, 'Процентное']],
        idProperty: 'value'
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeEnb',
        fields: ['value', 'text'],
        data: [[false, 'Нет'], [true, 'Да']],
        idProperty: 'value'
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeDiv',
        fields: ['value', 'text'],
        data: [[0, 'Числитель'], [1, 'Знаменатель']],
        idProperty: 'value'
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeObjType',
        fields: ['value', 'text'],
        data: [[1, "Бумага"], [2, "Группа бумаг"], [3, "Эмитент"], [4, "Группа эмитентов"]],
        idProperty: 'value'
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeObjTypeL',
        fields: ['value', 'text'],
        data: [[3, "Клиент"], [5, "Договор"], [1, "Портфель"]],
        idProperty: 'value'
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeNot',
        fields: ['value', 'text'],
        data: [[1, '+'], [0, '-']],
        idProperty: 'value'
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeInvDeclWhere',
        model: 'InvDeclWhere',
        remoteSort: true,
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          api: {
            read: '@Url.Action("InvestDeclWhereList")',
            create: '@Url.Action("addInvestDeclWhere")',
            update: '@Url.Action("updInvestDeclWhere")',
            destroy: '@Url.Action("delInvestDeclWhere")'
          },
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          writer: {
            type: 'json',
            rootProperty: 'data',
            writeAllFields: true,
            allowSingle: false,
            encode: false
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeInvDeclSec',
        model: 'InvDeclSec',
        remoteSort: true,
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          api: {
            read: '@Url.Action("InvestDeclSecList")',
            create: '@Url.Action("addInvestDeclSec")',
            update: '@Url.Action("updInvestDeclSec")',
            destroy: '@Url.Action("delInvestDeclSec")'
          },
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          writer: {
            type: 'json',
            rootProperty: 'data',
            writeAllFields: true,
            allowSingle: false,
            encode: false
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeGroupType',
        idProperty: 'value',
        fields: [
          { name: 'text', type: 'string' },
          { name: 'value', type: 'int' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getInvestDeclGroupType")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeSec',
        idProperty: 'SecurityID',
        fields: [
          { name: 'SecurityID', type: 'int' },
          { name: 'Name', type: 'string' },
          { name: 'ISIN', type: 'string' },
          { name: 'SecType', type: 'string' },
          { name: 'DateEnd', type: 'date', dateFormat: "c", persist: false }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getSec")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.define('SecGroup', {
        extend: 'Ext.data.Model',
        idProperty: 'SecurityGroupID',
        fields: [
          { name: 'SecurityGroupID', type: 'int' },
          { name: 'Name', type: 'string' }
        ]
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeSecGrp',
        model: 'SecGroup',
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          api: {
            read: '@Url.Action("getSecGroup")',
            create: '@Url.Action("addSecGroup")',
            update: '@Url.Action("updSecGroup")',
            destroy: '@Url.Action("delSecGroup")'
          },
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          writer: {
            type: 'json',
            rootProperty: 'data',
            writeAllFields: true,
            allowSingle: false,
            encode: false
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeEmit',
        idProperty: 'FinInstID',
        fields: [
          { name: 'FinInstID', type: 'int' },
          { name: 'Name', type: 'string' },
          { name: 'INN', type: 'string' },
          { name: 'KPP', type: 'string' },
          { name: 'Name1', type: 'string' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getEmitentList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeClient',
        idProperty: 'FinInstID',
        fields: [
          { name: 'FinInstID', type: 'int' },
          { name: 'Name', type: 'string' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getClientList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeTreaty',
        idProperty: 'TreatyID',
        fields: [
          { name: 'TreatyID', type: 'int' },
          { name: 'Name', type: 'string' },
          { name: 'ClientName', type: 'string' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getTreatyList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.define('Portfolio', {
        extend: 'Ext.data.Model',
        idProperty: 'PortfolioID',
        fields: [
          { name: 'PortfolioID', type: 'int' },
          { name: 'Name', type: 'string' },
          { name: 'PortfolioTypeID', type: 'int' },
          { name: 'PortfolioType', type: 'string', persist: false }
        ]
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storePortfolio',
        model: 'Portfolio',
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getPortfolioList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storePortType',
        idProperty: 'PortfolioTypeID',
        fields: [
          { name: 'PortfolioTypeID', type: 'int' },
          { name: 'Name', type: 'string' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getPortfolioTypeList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.define('InvDecl.Win', {
        extend: 'Ext.window.Window',
        alias: 'widget.invdeclwin',

        initComponent: function () {
          Ext.apply(this, {
            width: 600,
            closeAction: 'hide',
            modal: true,
            buttonAlign: 'center',
            items: [{
              xtype: 'form',
              border: false,
              //height: 300,
              defaults: { anchor: '100%' },
              bodyPadding: 10,
              activeRecord: null,
              fieldDefaults: {
                labelAlign: 'top',
                msgTarget: 'side'
              },
              items: [{
                name: 'Name',
                fieldLabel: 'Наименование',
                xtype: 'textfield'
              }, {
                name: 'Comment',
                fieldLabel: 'Примечание',
                xtype: 'textfield'
              }, {
                fieldLabel: 'Тип',
                xtype: 'combobox',
                name: 'InvestDeclTypeID',
                store: Ext.create('Ext.data.Store', {
                  remoteSort: true,
                  autoLoad: true,
                  fields: ['Text', 'Value'],
                  proxy: {
                    type: 'ajax',
                    actionMethods: { read: 'POST' },
                    url: '@Url.Action("InvestDeclTypeList")',
                    reader: {
                      type: 'json',
                      rootProperty: 'data'
                    },
                    simpleSortMode: true
                  }
                }),
                displayField: 'Text',
                valueField: 'Value',
                typeAhead: true,
                queryMode: 'local',
                emptyText: '*',
                selectOnFocus: true,
                width: 180
              }, {
                xtype: 'checkbox',
                name: 'Enb',
                fieldLabel: 'Действует?',
                labelAlign: 'right',
                labelWidth: 70
              }]
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'bottom',
              ui: 'footer',
              items: ['->', {
                iconCls: 'icon-save',
                itemId: 'save',
                text: 'Сохранить',
                disabled: true,
                scope: this,
                handler: this.onSave
              }, {
                  //iconCls: 'icon-cancel',
                  text: 'Отмена',
                  scope: this,
                  handler: this.onCancel
                }]
            }]
          });
          this.callParent();
        },

        setActiveRecord: function (record) {
          this.activeRecord = record;
          if (record) {
            this.down('#save').enable();
            this.down('form').getForm().reset(true).loadRecord(record);
          } else {
            this.down('#save').disable();
            this.down('form').getForm().reset();
          }
        },

        onSave: function () {
          var active = this.activeRecord, form = this.down('form').getForm();
          if (!active) {
            return;
          }
          if (form.isValid()) {
            if (this.title === 'Добавить')
              this.fireEvent('create', this, form.getValues(false, false, false, true));
            else {
              form.updateRecord(active);
              this.fireEvent('update');
            }
            this.hide();
          }
        },

        onCancel: function () {
          this.hide();
        }
      });

      Ext.define('InvDecl.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.invdeclgrid',
        initComponent: function () {
          Ext.apply(this, {
            wini: null,
            border: false,
            loadMask: true,
            columns: [{
              header: "Наименование",
              dataIndex: 'Name',
              width: 500,
              sortable: true
            }, {
              header: 'А',
              dataIndex: 'Enb',
              width: 30,
              xtype: 'checkcolumn',
              sortable: true
            }, {
              header: "Тип",
              dataIndex: 'Type',
              width: 160,
              sortable: true
            }, {
              header: "Создана",
              dataIndex: 'CreateDate',
              width: 130,
              renderer: Ext.util.Format.dateRenderer('d.m.Y H:i'),
              sortable: true
            }, {
              header: "Изменена",
              dataIndex: 'ModifyDate',
              width: 130,
              renderer: Ext.util.Format.dateRenderer('d.m.Y H:i'),
              sortable: true
            }, {
              header: "ИД",
              dataIndex: 'InvestDeclID',
              width: 60,
              align: 'right',
              sortable: true
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext', text: ' Акт: '
              }, {
                itemId: 'cbEnb',
                xtype: 'combobox',
                store: 'storeEnb',
                displayField: 'text',
                valueField: 'value',
                typeAhead: true,
                queryMode: 'local',
                emptyText: '*',
                selectOnFocus: true,
                width: 60,
                listeners: {
                  //beforerender: function () { this.setValue('T', false); }
                }
              }, '-', ' Тип: ', {
                itemId: 'cbType',
                xtype: 'combobox',
                store: Ext.create('Ext.data.Store', {
                  remoteSort: true,
                  autoLoad: true,
                  fields: ['Text', 'Value'],
                  proxy: {
                    type: 'ajax',
                    actionMethods: { read: 'POST' },
                    url: '@Url.Action("InvestDeclTypeList")',
                    reader: {
                      type: 'json',
                      rootProperty: 'data'
                    },
                    simpleSortMode: true
                  }
                }),
                displayField: 'Text',
                valueField: 'Value',
                typeAhead: true,
                queryMode: 'local',
                emptyText: '*',
                selectOnFocus: true,
                width: 180
              }, ' ', {
                iconCls: 'icon-refresh',
                itemId: 'refresh',
                text: 'Обновить',
                handler: function () {
                  this.store.proxy.extraParams = { enb: this.down('#cbEnb').getValue(), type: this.down('#cbType').getValue() };
                  this.store.load();
                },
                scope: this
              }, {
                iconCls: 'icon-add',
                text: 'Добавить',
                itemId: 'add',
                scope: this,
                handler: this.onAddClick
              }, {
                text: 'Изменить',
                disabled: true,
                itemId: 'change',
                scope: this,
                handler: this.onChangeClick
              }, {
                iconCls: 'icon-delete',
                text: 'Удалить',
                disabled: true,
                itemId: 'delete',
                scope: this,
                handler: this.onDeleteClick
              }@*, ' ', {
                xtype: 'tbtext', text: ' Дата: '
              }, {
                xtype: 'datefield',
                itemId: 'dt',
                allowBlank: false,
                format: 'd.m.Y',
                startDay: 1,
                value: Ext.Date.add(Ext.Date.clearTime(new Date(), false), Ext.Date.DAY, -2),
                width: 100
              }, {
                xtype: 'tbtext',
                text: ' МодСдел:'
              }, {
                xtype: 'checkbox',
                itemId: 'cbWithMD'
              }*@, {
                text: 'Проверить',
                disabled: true,
                itemId: 'check',
                scope: this,
                handler: this.onCheckClick
              }
              ]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: function () {
                  this.store.proxy.extraParams = { enb: this.down('#cbEnb').getValue(), type: this.down('#cbType').getValue() };
                  this.store.load();
                },
                itemdblclick: function (view, record, item, index, e) {
                  var tabs = this.up('tabpanel');
                  var tab = tabs.down('#tcDeclW');
                  var grid = tab.down('invdeclwgrid');
                  grid.setTitle(record.data.Name);

                  tab.tab.show();
                  tabs.setActiveTab(tab);
                  grid.store.proxy.extraParams = { InvDeclID: record.data.InvestDeclID, enb: grid.down('#cbEnb').getValue() };
                  grid.store.load();
                  grid.getSelectionModel().deselectAll();
                  tab.down('invdeclsecgrid').store.removeAll();
                },

                selectionchange: {
                  fn: this.onSelectChange
                }
              },
              getRowClass: function (record) {
                if (!record.get('Enb'))
                  return 'gray-row';
              }
            }
          });
          this.callParent();
        },

        onCheckClick: function () {
          var me = this;
          var w = Ext.create('Ext.window.Window', {
            scope: this,
            title: 'Проверка декларации',
            modal: true,
            width: 500,
            //height: window.innerHeight,
            //layout: 'anchor',
            items: [{
              xtype: 'form',
              bodyPadding: 10,
              items: [{
                xtype: 'datefield',
                labelWidth: 100,
                width: 210,
                labelAlign: 'right',
                format: 'd.m.Y',
                name: 'dt',
                itemId: 'dt',
                fieldLabel: 'Дата',
                allowBlank: false,
                startDay: 1,
                listeners: {
                  afterrender: function () { this.setValue(Ext.util.Cookies.get("cddt") ? new Date(Ext.util.Cookies.get("cddt")) : Ext.Date.add(Ext.Date.clearTime(new Date(), false), Ext.Date.DAY, -2)); },
                  blur: function () { Ext.util.Cookies.set('cddt', this.getValue()); }
                }
              }, {
                xtype: 'checkbox',
                name: 'cbWithMD',
                itemId: 'cbWithMD',
                fieldLabel: 'Учитывать моделированные сделки?',
                labelAlign: 'right',
                  labelWidth: 250,
                  listeners: {
                    afterrender: function () { this.setValue(Ext.util.Cookies.get("cdmd") ); },
                    blur: function () { Ext.util.Cookies.set('cdmd', this.getValue()); }
                  }
              }]
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'bottom',
              ui: 'footer',
              items: ['->', {
                itemId: 'save',
                text: 'Проверить',
                scope: this,
                handler: function () {
                  var form = Ext.getDom('checkDecl');
                  form.id.value = me.getSelectionModel().getSelection()[0].get('InvestDeclID');
                  form.dt.value = w.down('#dt').rawValue;
                  form.withMD.value = w.down('#cbWithMD').getValue();
                  form.submit();
                  w.close();
                }
              }, {
                  text: 'Отмена',
                  scope: this,
                  handler: function () { w.close(); }
                }]
            }]
          }).show(this);
        },

        onAddClick: function () {
          var rec = Ext.create('InvDecl', { InvestDeclTypeID: this.down('#cbType').getValue() /*Name: null, Enb: true, InvestDeclID: null, , CreateDate: null, ModifyDate: null*/ });
          if (!this.wini) {
            this.onCreateWin();
          }
          this.wini.setTitle('Добавить');
          this.wini.setActiveRecord(rec);
          this.wini.show(this);
        },

        onChangeClick: function () {
          if (!this.wini) {
            this.onCreateWin();
          }
          this.wini.setTitle('Изменить');
          this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
          this.wini.show(this);
        },

        onCreateWin: function () {
          this.wini = Ext.create('InvDecl.Win', {
            scope: this,
            listeners: {
              scope: this,
              create: function (form, data) {
                this.store.insert(0, data);
                this.store.sync();
              },
              update: function () {
                this.store.sync();
              }
            }
          });
        },

        onSelectChange: function (selModel, selections) {
          this.down('#delete').setDisabled(selections.length === 0);
          this.down('#change').setDisabled(selections.length === 0);
          this.down('#check').setDisabled(selections.length === 0);
          var grid = this.up('panel').down('#idLink');
          if (grid) {
            if (selections.length === 0) {
              grid.down('#add').setDisabled(true);
              grid.down('#refresh').setDisabled(true);
            }
            else {
              grid.store.proxy.extraParams = { InvDeclID: this.getView().getSelectionModel().getSelection()[0].get('InvestDeclID'), enb: grid.down('#cbEnb').getValue() };
              grid.store.load();
              grid.down('#add').setDisabled(false);
              grid.down('#refresh').setDisabled(false);
            }
          }

        },

        onDeleteClick: function () {
          var selection = this.getView().getSelectionModel().getSelection()[0];
          if (selection) {
            if (window.confirm('Удалить стр.?')) {
              this.store.remove(selection);
              this.store.sync();
            }
          }
        }
      });

      Ext.define('InvDeclLink.Win', {
        extend: 'Ext.window.Window',
        alias: 'widget.invdecllinkwin',

        initComponent: function () {
          Ext.apply(this, {
            width: 600,
            closeAction: 'hide',
            modal: true,
            buttonAlign: 'center',
            items: [{
              xtype: 'form',
              border: false,
              //height: 300,
              defaults: { anchor: '100%' },
              bodyPadding: 10,
              activeRecord: null,
              fieldDefaults: {
                labelAlign: 'right',
                msgTarget: 'side'
              },
              items: [{
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  xtype: 'checkbox',
                  name: 'Enb',
                  fieldLabel: 'Действует?',
                  labelAlign: 'right',
                  labelWidth: 70,
                  margin: '0 15 0 0'
                }, {
                  xtype: 'datefield',
                  format: 'd.m.Y',
                  flex: 1,
                  name: 'DateStart',
                  fieldLabel: 'Начало',
                  margin: '0 15 0 0'
                }, {
                  xtype: 'datefield',
                  format: 'd.m.Y',
                  flex: 1,
                  name: 'DateFinish',
                  fieldLabel: 'Окончание'
                }]
              }, {
                fieldLabel: 'Тип',
                xtype: 'combobox',
                name: 'ObjType',
                store: 'storeObjTypeL',
                displayField: 'text',
                valueField: 'value',
                forceSelection: true,
                typeAhead: false,
                queryMode: 'local',
                selectOnFocus: true,
                allowBlank: false,
                listeners: {
                  scope: this,
                  change: function () {
                    this.down('form').getForm().findField('Name').setValue(null);
                    this.down('form').getForm().findField('ObjID').setValue(null);
                  }
                }
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  name: 'Name',
                  fieldLabel: 'Наименование',
                  xtype: 'textfield',
                  readOnly: true,
                  allowBlank: false,
                  flex: 1
                }, {
                  xtype: 'button',
                  text: 'Выбрать',
                  scope: this,
                  handler: this.onShowType
                }]
              }, {
                xtype: 'hidden',
                name: 'ObjID'
              }, {
                xtype: 'hidden',
                name: 'InvestDeclID'
              }]
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'bottom',
              ui: 'footer',
              items: ['->', {
                iconCls: 'icon-save',
                itemId: 'save',
                text: 'Сохранить',
                disabled: true,
                scope: this,
                handler: this.onSave
              }, {
                  //iconCls: 'icon-cancel',
                  text: 'Отмена',
                  scope: this,
                  handler: this.onCancel
                }]
            }]
          });
          this.callParent();
        },

        onShowType: function () {
          var v = this.down('form').getForm().findField('ObjType').getValue();
          if (v) {
            var w = Ext.create('Ext.window.Window', {
              scope: this,
              title: this.down('form').getForm().findField('ObjType').getDisplayValue(),
              modal: true,
              width: 1000,
              height: window.innerHeight,
              layout: 'fit',
              items: [{
                xtype: v === 3 ? 'clientgrid' : v === 5 ? 'treatygrid' : v === 1 ? 'portfoliogrid' : 'grid'
              }],
              listeners: {
                scope: this,
                sel: function (text, id) {
                  //console.log(data);
                  this.down('form').getForm().findField('Name').setValue(text);
                  this.down('form').getForm().findField('ObjID').setValue(id);
                  w.close();
                }
              }
            }).show(this);
          }
        },

        setActiveRecord: function (record) {
          this.activeRecord = record;
          if (record) {
            this.down('#save').enable();
            this.down('form').getForm().reset(true).loadRecord(record);
          } else {
            this.down('#save').disable();
            this.down('form').getForm().reset();
          }
        },

        onSave: function () {
          var active = this.activeRecord, form = this.down('form').getForm();
          if (!active) {
            return;
          }
          if (form.isValid()) {
            if (this.title === 'Добавить')
              this.fireEvent('create', this, form.getValues(false, false, false, true));
            else {
              form.updateRecord(active);
              this.fireEvent('update');
            }
            this.hide();
          }
        },

        onCancel: function () {
          this.hide();
        }
      });

      Ext.define('ClientGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.clientgrid',
        initComponent: function () {
          Ext.apply(this, {
            store: 'storeClient',
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              flex: 1
            }, {
              dataIndex: 'FinInstID',
              header: 'ID',
              width: 20
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, '-', {
                iconCls: 'icon-refresh',
                itemId: 'refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: {
                  fn: this.onRefreshClick
                },
                itemdblclick: {
                  fn: this.onSelect
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = {
            filter: this.down('#tfFind').getValue()
          };
          this.store.load();
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('FinInstID'));
          return false;
        }
      });

      Ext.define('TreatyGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.treatygrid',
        initComponent: function () {
          Ext.apply(this, {
            store: 'storeTreaty',
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              flex: 1
            }, {
              dataIndex: 'ClientName',
              header: 'Клиент',
              flex: 1
            }, {
              dataIndex: 'FinInstID',
              header: 'ID',
              width: 30
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, '-', {
                iconCls: 'icon-refresh',
                itemId: 'refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: {
                  fn: this.onRefreshClick
                },
                itemdblclick: {
                  fn: this.onSelect
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = {
            filter: this.down('#tfFind').getValue()
          };
          this.store.load();
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('TreatyID'));
          return false;
        }
      });

      Ext.define('PortfolioGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.portfoliogrid',
        initComponent: function () {
          Ext.apply(this, {
            store: 'storePortfolio',
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              flex: 3
            }, {
              dataIndex: 'PortfolioType',
              header: 'Тип',
              flex: 1
            }, {
              dataIndex: 'PortfolioID',
              header: 'ID',
              width: 20
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, '-', ' Тип: ', {
                itemId: 'cbType',
                xtype: 'combobox',
                store: 'storePortType',
                displayField: 'Name',
                valueField: 'PortfolioTypeID',
                typeAhead: true,
                queryMode: 'local',
                emptyText: '*',
                selectOnFocus: true,
                width: 180,
                listeners: {
                  beforerender: function () {
                    this.store.load();
                  }
                }
              }, ' ', {
                iconCls: 'icon-refresh',
                itemId: 'refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: {
                  fn: this.onRefreshClick
                },
                itemdblclick: {
                  fn: this.onSelect
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = {
            TypeID: this.down('#cbType').getValue(),
            filter: this.down('#tfFind').getValue()
          };
          this.store.load();
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('PortfolioID'));
          return false;
        }
      });

      Ext.define('InvDeclLink.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.invdecllinkgrid',
        initComponent: function () {
          Ext.apply(this, {
            wini: null,
            border: false,
            loadMask: true,
            columns: [{
              header: "Тип",
              dataIndex: 'ObjTypeS',
              width: 160,
              sortable: true
            }, {
              header: "Наименование",
              dataIndex: 'Name',
              width: 500,
              sortable: true
            }, {
              header: 'А',
              dataIndex: 'Enb',
              width: 30,
              xtype: 'checkcolumn',
              sortable: true
            }, {
              header: "Начало",
              dataIndex: 'DateStart',
              width: 110,
              renderer: Ext.util.Format.dateRenderer('d.m.Y'),
              sortable: true
            }, {
              header: "Окончание",
              dataIndex: 'DateFinish',
              width: 110,
              renderer: Ext.util.Format.dateRenderer('d.m.Y'),
              sortable: true
            }, {
              header: "ИД",
              dataIndex: 'InvestDeclLinkID',
              width: 60,
              align: 'right',
              sortable: true
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext', text: ' Акт: '
              }, {
                itemId: 'cbEnb',
                xtype: 'combobox',
                store: 'storeEnb',
                displayField: 'text',
                valueField: 'value',
                typeAhead: true,
                queryMode: 'local',
                emptyText: '*',
                selectOnFocus: true,
                width: 60,
                listeners: {
                  //beforerender: function () { this.setValue('T', false); }
                }
              }, ' ', {
                iconCls: 'icon-refresh',
                itemId: 'refresh',
                text: 'Обновить',
                disabled: true,
                handler: function () {
                  this.store.proxy.extraParams.enb = this.down('#cbEnb').getValue();
                  this.store.load();
                },
                scope: this
              }, {
                iconCls: 'icon-add',
                text: 'Добавить',
                disabled: true,
                itemId: 'add',
                scope: this,
                handler: this.onAddClick
              }, {
                text: 'Изменить',
                disabled: true,
                itemId: 'change',
                scope: this,
                handler: this.onChangeClick
              }, {
                iconCls: 'icon-delete',
                text: 'Удалить',
                disabled: true,
                itemId: 'delete',
                scope: this,
                handler: this.onDeleteClick
              }, '->'
              ]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: function () {
                  //this.store.proxy.extraParams = { enb: this.down('#cbEnb').getValue(), type: this.down('#cbType').getValue() };
                  //this.store.load();
                },

                selectionchange: {
                  fn: this.onSelectChange
                }
              }
            }
          })
          this.callParent();
        },

        onAddClick: function () {
          var rec = Ext.create('InvDeclLink', { InvestDeclID: this.store.proxy.extraParams.InvDeclID, FLAG_Calculation: 1, Enb: true /*this.down('#cbEnb').getValue()*/, DateStart: Ext.Date.add(Ext.Date.clearTime(new Date(), false), Ext.Date.DAY, -Ext.Date.getDayOfYear(new Date())), DateFinish: new Date(2050, 1, 1) });
          if (!this.wini) {
            this.onCreateWin();
          }
          this.wini.setTitle('Добавить');
          this.wini.setActiveRecord(rec);
          this.wini.show(this);
        },

        onChangeClick: function () {
          if (!this.wini) {
            this.onCreateWin();
          }
          this.wini.setTitle('Изменить');
          this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
          this.wini.show(this);
        },

        onCreateWin: function () {
          this.wini = Ext.create('InvDeclLink.Win', {
            scope: this,
            listeners: {
              scope: this,
              create: function (form, data) {
                this.store.insert(0, data);
                this.store.sync();
              },
              update: function () {
                this.store.sync();
              }
            }
          });
        },

        onSelectChange: function (selModel, selections) {
          this.down('#delete').setDisabled(selections.length === 0);
          this.down('#change').setDisabled(selections.length === 0);
        },

        onDeleteClick: function () {
          var selection = this.getView().getSelectionModel().getSelection()[0];
          if (selection) {
            if (window.confirm('Удалить стр.?')) {
              this.store.remove(selection);
              this.store.sync();
            }
          }
        }

      });

      Ext.define('InvDeclW.Win', {
        extend: 'Ext.window.Window',
        alias: 'widget.invdeclwwin',

        initComponent: function () {
          Ext.apply(this, {
            width: 600,

            closeAction: 'hide',
            modal: true,
            buttonAlign: 'center',
            items: [{
              xtype: 'form',
              border: false,
              //height: 300,
              defaults: { anchor: '100%' },
              bodyPadding: 10,
              activeRecord: null,
              fieldDefaults: {
                labelAlign: 'top',
                msgTarget: 'side'
              },
              items: [{
                name: 'NameWhere',
                fieldLabel: 'Наименование условия',
                xtype: 'textfield'
              }, {
                name: 'Comment',
                fieldLabel: 'Примечание',
                xtype: 'textfield'
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  fieldLabel: 'Значение',
                  xtype: 'combobox',
                  name: 'FLAG_Calculation',
                  store: 'storeCalc',
                  displayField: 'text',
                  valueField: 'value',
                  typeAhead: true,
                  queryMode: 'local',
                  emptyText: '*',
                  selectOnFocus: true,
                  margin: '0 5 0 0',
                  flex: 1
                }, {
                  name: 'StartValue',
                  fieldLabel: 'От',
                  xtype: 'numberfield',
                  flex: 1,
                  decimalSeparator: '.',
                  margin: '0 5 0 0',
                  textAlign: 'right',
                  hideTrigger: true,
                  keyNavEnabled: false,
                  mouseWheelEnabled: false,
                  decimalPrecision: 4
                }, {
                  name: 'StopValue',
                  fieldLabel: 'До',
                  xtype: 'numberfield',
                  flex: 1,
                  decimalSeparator: '.',
                  textAlign: 'right',
                  margin: '0 0 0 5',
                  hideTrigger: true,
                  keyNavEnabled: false,
                  mouseWheelEnabled: false,
                  decimalPrecision: 4
                }]
              }, {
                fieldLabel: 'Вычисление',
                xtype: 'combobox',
                name: 'FLAG_Group',
                store: 'storeGroupType',
                displayField: 'text',
                valueField: 'value',
                typeAhead: true,
                queryMode: 'local',
                emptyText: '*',
                selectOnFocus: true,
                width: 180,
                listeners: {
                  //scope: this,
                  beforerender: function () {
                    this.store.load();
                  }
                }
              }, {
                xtype: 'checkbox',
                name: 'Enb',
                fieldLabel: 'Действует?',
                labelAlign: 'right',
                labelWidth: 70
              }, {
                xtype: 'hidden',
                name: 'InvestDeclID'
              }]
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'bottom',
              ui: 'footer',
              items: ['->', {
                iconCls: 'icon-save',
                itemId: 'save',
                text: 'Сохранить',
                disabled: true,
                scope: this,
                handler: this.onSave
              }, {
                  //iconCls: 'icon-cancel',
                  text: 'Отмена',
                  scope: this,
                  handler: this.onCancel
                }]
            }]
          });
          this.callParent();
        },

        setActiveRecord: function (record) {
          this.activeRecord = record;
          if (record) {
            this.down('#save').enable();
            this.down('form').getForm().reset(true).loadRecord(record);
          } else {
            this.down('#save').disable();
            this.down('form').getForm().reset();
          }
        },

        onSave: function () {
          var active = this.activeRecord, form = this.down('form').getForm();
          if (!active) {
            return;
          }
          if (form.isValid()) {
            if (this.title === 'Добавить')
              this.fireEvent('create', this, form.getValues(false, false, false, true));
            else {
              form.updateRecord(active);
              this.fireEvent('update');
            }
            this.hide();
          }
        },

        onCancel: function () {
          this.hide();
        }
      });

      Ext.define('InvDeclW.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.invdeclwgrid',
        initComponent: function () {
          Ext.apply(this, {
            wini: null,
            border: false,
            loadMask: true,
            columns: [{
              header: "Наименование",
              dataIndex: 'NameWhere',
              width: 500,
              sortable: true
            }, {
              header: 'А',
              dataIndex: 'Enb',
              width: 30,
              xtype: 'checkcolumn',
              sortable: true
            }, {
              header: "От",
              dataIndex: 'StartValue',
              width: 70,
              align: 'right',
              sortable: true
            }, {
              header: "До",
              dataIndex: 'StopValue',
              width: 70,
              align: 'right',
              sortable: true
            }, {
              header: "Значение",
              dataIndex: 'Calculation',
              width: 100,
              sortable: true
            }, {
              header: 'Вычисление',
              dataIndex: 'Group',
              width: 200,
              sortable: true
            }, {
              header: "Flag Type",
              dataIndex: 'FLAG_Type',
              align: 'right',
              width: 60,
              sortable: true
            }, {
              header: "Flag Long",
              dataIndex: 'FLAG_Long',
              align: 'right',
              width: 60,
              sortable: true
            }, {
              header: "Создана",
              dataIndex: 'CreateDate',
              width: 130,
              renderer: Ext.util.Format.dateRenderer('d.m.Y H:i'),
              sortable: true
            }, {
              header: "Изменена",
              dataIndex: 'ModifyDate',
              width: 130,
              renderer: Ext.util.Format.dateRenderer('d.m.Y H:i'),
              sortable: true
            }, {
              header: "ИД",
              dataIndex: 'InvestDeclWhereID',
              width: 60,
              align: 'right',
              sortable: true
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext', text: ' Акт: '
              }, {
                itemId: 'cbEnb',
                xtype: 'combobox',
                store: 'storeEnb',
                displayField: 'text',
                valueField: 'value',
                typeAhead: true,
                queryMode: 'local',
                emptyText: '*',
                selectOnFocus: true,
                width: 60,
                listeners: {
                  //beforerender: function () { this.setValue('T', false); }
                }
              }, '-', {
                iconCls: 'icon-refresh',
                itemId: 'refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }, {
                iconCls: 'icon-add',
                text: 'Добавить',
                itemId: 'add',
                scope: this,
                handler: this.onAddClick
              }, {
                text: 'Изменить',
                disabled: true,
                itemId: 'change',
                scope: this,
                handler: this.onChangeClick
              }, {
                iconCls: 'icon-delete',
                text: 'Удалить',
                disabled: true,
                itemId: 'delete',
                scope: this,
                handler: this.onDeleteClick
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: function () {
                  //this.store.proxy.extraParams = { enb: this.down('#cbEnb').getValue() };
                  //this.store.load();
                },
                itemdblclick: this.onChangeClick,
                selectionchange: {
                  fn: this.onSelectChange
                }
              },
              getRowClass: function (record) {
                if (!record.get('Enb'))
                  return 'gray-row';
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams.enb = this.down('#cbEnb').getValue();
          this.store.load();

        },

        onAddClick: function () {
          var rec = Ext.create('InvDeclWhere', { InvestDeclID: this.store.proxy.extraParams.InvDeclID, FLAG_Calculation: 1, Enb: true });
          if (!this.wini) {
            this.onCreateWin();
          }
          this.wini.setTitle('Добавить');
          this.wini.setActiveRecord(rec);
          this.wini.show(this);
        },

        onChangeClick: function () {
          if (!this.wini) {
            this.onCreateWin();
          }
          this.wini.setTitle('Изменить');
          this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
          this.wini.show(this);
        },

        onCreateWin: function () {
          this.wini = Ext.create('InvDeclW.Win', {
            scope: this,
            listeners: {
              scope: this,
              create: function (form, data) {
                this.store.insert(0, data);
                this.store.sync();
              },
              update: function () {
                this.store.sync();
              }
            }
          });
        },

        onSelectChange: function (selModel, selections) {
          this.down('#delete').setDisabled(selections.length === 0);
          this.down('#change').setDisabled(selections.length === 0);
          var grid = this.up('panel').down('#idDeclSec');
          if (grid) {
            if (selections.length === 0) {
              grid.down('#add').setDisabled(true);
              grid.down('#refresh').setDisabled(true);
            }
            else {
              grid.store.proxy.extraParams = { InvDeclWhereID: this.getView().getSelectionModel().getSelection()[0].get('InvestDeclWhereID'), div: grid.down('#cbDiv').getValue() };
              grid.store.load();
              grid.down('#add').setDisabled(false);
              grid.down('#refresh').setDisabled(false);
            }
          }
        },

        onDeleteClick: function () {
          var selection = this.getView().getSelectionModel().getSelection()[0];
          if (selection) {
            if (window.confirm('Удалить стр.?')) {
              this.store.remove(selection);
              this.store.sync();
            }
          }
        }

      });

      Ext.define('SelWin.Win', {
        extend: 'Ext.window.Window',
        initComponent: function () {
          Ext.apply(this, {
            modal: true,
            width: 700,
            //height: 300,
            layout: 'fit',
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'bottom',
              items: [{
                text: 'Выбрать',
                scope: this,
                handler: function () {
                  this.fireEvent('sel', 'aaa');
                  this.close();
                }
              }]
            }]
          });
          this.callParent();
        }
      });

      Ext.define('SecGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.secgrid',
        initComponent: function () {
          Ext.apply(this, {
            store: 'storeSec',
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              width: 300
            }, {
              dataIndex: 'ISIN',
              header: 'ISIN',
              width: 150
            }, {
              dataIndex: 'RegNumber',
              header: 'Рег.номер',
              width: 150
            }, {
              dataIndex: 'SecType',
              header: 'Тип'
            }, {
              dataIndex: 'DateEnd',
              header: 'Погашение',
              renderer: Ext.util.Format.dateRenderer('d.m.Y')
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, '-', {
                iconCls: 'icon-refresh',
                itemId: 'refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: {
                  fn: this.onRefreshClick
                },
                itemdblclick: {
                  fn: this.onSelect
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = {
            filter: this.down('#tfFind').getValue()
          };
          this.store.load();
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('SecurityID'));
          return false;
        }

      });

      Ext.define('SecGroup.Win', {
        extend: 'Ext.window.Window',
        alias: 'widget.secgroupwin',

        initComponent: function () {
          Ext.apply(this, {
            width: 600,
            //  closeAction: 'hide',
            modal: true,
            buttonAlign: 'center',
            items: [{
              xtype: 'form',
              border: false,
              defaults: { anchor: '100%' },
              bodyPadding: 10,
              activeRecord: null,
              fieldDefaults: {
                labelAlign: 'right',
                msgTarget: 'side'
              },
              items: [{
                name: 'Name',
                fieldLabel: 'Наименование',
                xtype: 'textfield',
                allowBlank: false
              }]
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'bottom',
              ui: 'footer',
              items: ['->', {
                iconCls: 'icon-save',
                itemId: 'save',
                text: 'Сохранить',
                disabled: true,
                scope: this,
                handler: this.onSave
              }, {
                  //iconCls: 'icon-cancel',
                  text: 'Отмена',
                  scope: this,
                  handler: this.onCancel
                }]
            }]
          });
          this.callParent();
        },

        setActiveRecord: function (record) {
          this.activeRecord = record;
          if (record) {
            this.down('#save').enable();
            this.down('form').getForm().reset(true).loadRecord(record);
          } else {
            this.down('#save').disable();
            this.down('form').getForm().reset();
          }
        },

        onSave: function () {
          var active = this.activeRecord, form = this.down('form').getForm();
          if (!active) {
            return;
          }
          if (form.isValid()) {
            if (this.title === 'Добавить')
              this.fireEvent('create', this, form.getValues(false, false, false, true));
            else {
              form.updateRecord(active);
              this.fireEvent('update');
            }
            this.close();
          }
        },

        onCancel: function () {
          this.close();
        }
      });

      Ext.define('SecGroupGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.secgroupgrid',
        initComponent: function () {
          Ext.apply(this, {
            store: 'storeSecGrp',
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              flex: 1
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, '-', {
                iconCls: 'icon-refresh',
                itemId: 'refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }, {
                iconCls: 'icon-add',
                text: 'Добавить',
                itemId: 'add',
                scope: this,
                handler: this.onAddClick
              }, {
                text: 'Изменить',
                disabled: true,
                itemId: 'change',
                scope: this,
                handler: this.onChangeClick
              }, {
                iconCls: 'icon-delete',
                text: 'Удалить',
                disabled: true,
                itemId: 'delete',
                scope: this,
                handler: this.onDeleteClick
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: {
                  fn: this.onRefreshClick
                },
                itemdblclick: {
                  fn: this.onSelect
                },
                selectionchange: {
                  fn: this.onSelectChange
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = {
            filter: this.down('#tfFind').getValue()
          };
          this.store.load();
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('SecurityGroupID'));
          return false;
        },

        onAddClick: function () {
          var rec = Ext.create('SecGroup', { SecurityGroupID: 0 });
          var wini = this.onCreateWin();
          wini.setTitle('Добавить');
          wini.setActiveRecord(rec);
          wini.show(this);
        },

        onChangeClick: function () {
          var wini = this.onCreateWin();
          wini.setTitle('Изменить');
          wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
          wini.show(this);
        },

        onCreateWin: function () {
          return Ext.create('SecGroup.Win', {
            scope: this,
            listeners: {
              scope: this,
              create: function (form, data) {
                this.store.insert(0, data);
                this.store.sync();
              },
              update: function () {
                this.store.sync();
              }
            }
          });
        },

        onSelectChange: function (selModel, selections) {
          this.down('#delete').setDisabled(selections.length === 0);
          this.down('#change').setDisabled(selections.length === 0);
        },

        onDeleteClick: function () {
          var selection = this.getView().getSelectionModel().getSelection()[0];
          if (selection) {
            if (window.confirm('Удалить стр.?')) {
              this.store.remove(selection);
              this.store.sync();
            }
          }
        }
      });

      Ext.define('EmitGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.emitgrid',
        initComponent: function () {
          Ext.apply(this, {
            store: 'storeEmit',
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              flex: 1
            }, {
              dataIndex: 'INN',
              header: 'ИНН',
              width: 110
            }, {
              dataIndex: 'KPP',
              header: 'КПП',
              width: 110
            }, {
              dataIndex: 'Name1',
              header: 'Наименование2',
              flex: 1
            }, {
              dataIndex: 'FinInstID',
              header: 'ID',
              width: 20
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, '-', {
                iconCls: 'icon-refresh',
                itemId: 'refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: {
                  fn: this.onRefreshClick
                },
                itemdblclick: {
                  fn: this.onSelect
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = {
            filter: this.down('#tfFind').getValue()
          };
          this.store.load();
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('FinInstID'));
          return false;
        }

      });

      Ext.define('InvDeclSec.Win', {
        extend: 'Ext.window.Window',
        alias: 'widget.invdeclsecwin',

        initComponent: function () {
          Ext.apply(this, {
            width: 600,
            closeAction: 'hide',
            modal: true,
            buttonAlign: 'center',
            items: [{
              xtype: 'form',
              border: false,
              defaults: { anchor: '100%' },
              bodyPadding: 10,
              activeRecord: null,
              fieldDefaults: {
                labelAlign: 'right',
                msgTarget: 'side'
              },
              items: [{
                fieldLabel: 'Тип',
                xtype: 'combobox',
                name: 'ObjType',
                store: 'storeObjType',
                displayField: 'text',
                valueField: 'value',
                forceSelection: true,
                typeAhead: false,
                queryMode: 'local',
                selectOnFocus: true,
                allowBlank: false,
                listeners: {
                  scope: this,
                  change: function () {
                    this.down('form').getForm().findField('Name').setValue(null);
                    this.down('form').getForm().findField('ObjID').setValue(null);
                  }
                }
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  name: 'Name',
                  fieldLabel: 'Наименование',
                  xtype: 'textfield',
                  readOnly: true,
                  allowBlank: false,
                  flex: 1
                }, {
                  xtype: 'button',
                  text: 'Выбрать',
                  scope: this,
                  handler: this.onShowType
                }]
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  fieldLabel: 'Действие',
                  xtype: 'combobox',
                  name: 'FLAG_Not',
                  store: 'storeNot',
                  displayField: 'text',
                  valueField: 'value',
                  forceSelection: true,
                  typeAhead: false,
                  queryMode: 'local',
                  selectOnFocus: true,
                  allowBlank: false,
                  flex: 1
                }, {
                  fieldLabel: 'Набор',
                  xtype: 'combobox',
                  name: 'FLAG_Div',
                  store: 'storeDiv',
                  displayField: 'text',
                  valueField: 'value',
                  typeAhead: false,
                  queryMode: 'local',
                  selectOnFocus: true,
                  allowBlank: false,
                  flex: 1
                }]
              }, {
                xtype: 'checkbox',
                name: 'Enb',
                fieldLabel: 'Действует?',
                labelAlign: 'right'//,
                //       labelWidth: 50
              }, {
                xtype: 'hidden',
                name: 'ObjID'

              }, {
                xtype: 'hidden',
                name: 'InvestDeclWhereID'
              }]
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'bottom',
              ui: 'footer',
              items: ['->', {
                iconCls: 'icon-save',
                itemId: 'save',
                text: 'Сохранить',
                disabled: true,
                scope: this,
                handler: this.onSave
              }, {
                  //iconCls: 'icon-cancel',
                  text: 'Отмена',
                  scope: this,
                  handler: this.onCancel
                }]
            }]
          });
          this.callParent();
        },

        onShowType: function () {
          var v = this.down('form').getForm().findField('ObjType').getValue()
          if (v) {
            var w = Ext.create('Ext.window.Window', {
              scope: this,
              title: this.down('form').getForm().findField('ObjType').getDisplayValue(),
              modal: true,
              width: 1000,
              height: window.innerHeight,
              layout: 'fit',
              items: [{
                xtype: v === 1 ? 'secgrid' : v === 2 ? 'secgroupgrid' : v === 3 ? 'emitgrid' : 'grid'
              }]@*,
              dockedItems: [{
                xtype: 'toolbar',
                dock: 'bottom',
                items: [{
                  text: 'Выбрать',
                  //scope: this,
                  handler: function () {
                    this.up('window').fireEvent('sel', 'aaa');
                    this.up('window').close();
                  }
                }]
              }]*@,
              listeners: {
                scope: this,
                sel: function (text, id) {
                  //console.log(data);
                  this.down('form').getForm().findField('Name').setValue(text);
                  this.down('form').getForm().findField('ObjID').setValue(id);
                  w.close();
                }
              }
            }).show(this);
          }
        },

        setActiveRecord: function (record) {
          this.activeRecord = record;
          if (record) {
            this.down('#save').enable();
            this.down('form').getForm().reset(true).loadRecord(record);
          } else {
            this.down('#save').disable();
            this.down('form').getForm().reset();
          }
        },

        onSave: function () {
          var active = this.activeRecord, form = this.down('form').getForm();
          if (!active) {
            return;
          }
          if (form.isValid()) {
            if (this.title === 'Добавить')
              this.fireEvent('create', this, form.getValues(false, false, false, true));
            else {
              form.updateRecord(active);
              this.fireEvent('update');
            }
            this.hide();
          }
        },

        onCancel: function () {
          this.hide();
        }
      });

      Ext.define('InvDeclSec.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.invdeclsecgrid',
        initComponent: function () {
          Ext.apply(this, {
            wini: null,
            border: false,
            loadMask: true,
            columns: [{
              header: 'А',
              dataIndex: 'Enb',
              width: 30,
              xtype: 'checkcolumn',
              sortable: true
            }, {
              header: '',
              dataIndex: 'FLAG_Not',
              width: 30,
              renderer: function (val) { return val === 0 ? '-' : val === 1 ? '+' : 'Err'; }
            }, {
              header: "Тип",
              dataIndex: 'ObjTypeS',
              width: 150,
              sortable: true
            }, {
              header: "Наименование",
              dataIndex: 'Name',
              width: 500,
              sortable: true
            }, {
              header: "Набор",
              dataIndex: 'FLAG_Div',
              renderer: function (val) { return val === 0 ? 'Числитель' : val === 1 ? 'Знаменатель' : 'Error'; },
              width: 100,
              sortable: true
            }, {
              header: "ИД",
              dataIndex: 'InvestDeclSecID',
              width: 60,
              align: 'right',
              sortable: true
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Акт: '
              }, {
                itemId: 'cbEnb',
                xtype: 'combobox',
                store: 'storeEnb',
                displayField: 'text',
                valueField: 'value',
                typeAhead: true,
                queryMode: 'local',
                emptyText: '*',
                selectOnFocus: true,
                width: 60,
                listeners: {
                  //beforerender: function () { this.setValue('T', false); }
                }
              }, {
                xtype: 'tbtext',
                text: ' Набор: '
              }, {
                itemId: 'cbDiv',
                xtype: 'combobox',
                store: 'storeDiv',
                valueField: 'value',
                displayField: 'text',
                typeAhead: true,
                queryMode: 'local',
                forceSelection: true,
                triggerAction: 'all',
                emptyText: '*',
                width: 120
              }, '-', {
                iconCls: 'icon-refresh',
                itemId: 'refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }, {
                iconCls: 'icon-add',
                text: 'Добавить',
                itemId: 'add',
                scope: this,
                handler: this.onAddClick
              }, {
                text: 'Изменить',
                disabled: true,
                itemId: 'change',
                scope: this,
                handler: this.onChangeClick
              }, {
                iconCls: 'icon-delete',
                text: 'Удалить',
                disabled: true,
                itemId: 'delete',
                scope: this,
                handler: this.onDeleteClick
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: function () {
                  //this.store.proxy.extraParams = { enb: this.down('#cbEnb').getValue() };
                  //this.store.load();
                },
                itemdblclick: {
                  fn: this.onChangeClick
                },

                selectionchange: {
                  fn: this.onSelectChange
                }
              },
              getRowClass: function (record) {
                if (!record.get('Enb'))
                  return 'gray-row';
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams.div = this.down('#cbDiv').getValue();
          this.store.load();
        },

        onAddClick: function () {
          var rec = Ext.create('InvDeclSec', { InvestDeclWhereID: this.store.proxy.extraParams.InvDeclWhereID, FLAG_Not: 1, FLAG_Div: this.down('#cbDiv').getValue()/*, Enb: true*/ });
          if (!this.wini) {
            this.onCreateWin();
          }
          this.wini.setTitle('Добавить');
          this.wini.setActiveRecord(rec);
          this.wini.show(this);
        },

        onChangeClick: function () {
          if (!this.wini) {
            this.onCreateWin();
          }
          this.wini.setTitle('Изменить');
          this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
          this.wini.show(this);
        },

        onCreateWin: function () {
          this.wini = Ext.create('InvDeclSec.Win', {
            scope: this,
            listeners: {
              scope: this,
              create: function (form, data) {
                this.store.insert(0, data);
                this.store.sync();
              },
              update: function () {
                this.store.sync();
              }
            }
          });
        },

        onSelectChange: function (selModel, selections) {
          this.down('#delete').setDisabled(selections.length === 0);
          this.down('#change').setDisabled(selections.length === 0);
        },

        onDeleteClick: function () {
          var selection = this.getView().getSelectionModel().getSelection()[0];
          if (selection) {
            if (window.confirm('Удалить стр.?')) {
              this.store.remove(selection);
              this.store.sync();
            }
          }
        }

      });

      Ext.create('Ext.Viewport', {
        layout: 'border',
        items: [{
          region: 'north',
          border: false,
          contentEl: 'header'
        }, {
          xtype: 'tabpanel',
          tabPosition: 'top',
          region: 'center',
          activeTab: 0,
          frame: false,
          items: [{
            itemId: 'tcID',
            title: 'Список',
            tag: 0,
            layout: 'border',
            items: [{
              region: 'center',
              xtype: 'invdeclgrid',
              store: 'storeInvDecl'
            }, {
              region: 'south',
              height: '20%',
              itemId: 'idLink',
              xtype: 'invdecllinkgrid',
              store: 'storeInvDeclLink',
              split: true,
              border: false
            }]
          }, {
            itemId: 'tcDeclW',
            title: 'Условия',
            hidden: true,
            tag: 1,
            layout: 'border',
            items: [{
              region: 'center',
              xtype: 'invdeclwgrid',
              store: 'storeInvDeclWhere'
            }, {
              region: 'south',
              height: '30%',
              itemId: 'idDeclSec',
              xtype: 'invdeclsecgrid',
              store: 'storeInvDeclSec',
              split: true,
              border: false
            }]
          }],
          listeners: {
            beforetabchange: function (tp, newTab, currentTab) {
              for (var i = 0; i < tp.items.length; i++) {
                if (newTab.tag < tp.items.items[i].tag)
                  tp.items.items[i].tab.hide();
              }
            }
            //,
            //render: function (tp) {
            //  for (var i = 1; i < tp.items.length; i++)
            //    tp.items.items[i].tab.hide();
            //}
          }

        }]
      });
    });
  </script>
}
  <form id="checkDecl" action="@Url.Action("CheckDecl")" method="POST" style="display: none;">
    <input type="hidden" name="id" />
    <input type="hidden" name="dt" />
    <input type="hidden" name="withMD" />
  </form>
