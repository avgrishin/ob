@{
  ViewBag.Title = "Моделирование сделок";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts {
  <style type="text/css">
    .icon-refresh
    {
      background-image: url(@Href("~/Scripts/ExtJS62/build/classic/theme-gray/resources/images/grid/refresh.gif")) !important;
    }
  </style>
  <link rel="stylesheet" type="text/css" href="~/Scripts/ExtJS62/build/classic/theme-gray/resources/theme-gray-all.css" />
  <script type="text/javascript" src="~/Scripts/ExtJS62/ext-bootstrap.js"></script>

  <script type="text/javascript" src="~/Scripts/ExtJS62/build/classic/locale/locale-ru.js"></script>
  <script type="text/javascript" src="~/Scripts/ExtJS62/ux/Exporter.js"></script>

  <script type="text/javascript">
    Ext.apply(Ext.form.VTypes, {
      daterange: function (val, field) {
        var date = field.parseDate(val);
        if (!date) {
          return false;
        }
        if (field.startDateField) {
          //var start = field.ownerCt.getComponent(field.startDateField);
          var start = field.up('form').getForm().findField(field.startDateField)
          if (!start.maxValue || date.getTime() !== start.maxValue.getTime()) {
            start.setMaxValue(date);
            start.validate();
          }
        }
        else if (field.endDateField) {
          var end = field.up('form').getForm().findField(field.endDateField)
          //var end = field.ownerCt.getComponent(field.endDateField);
          if (!end.minValue || date.getTime() !== end.minValue.getTime()) {
            end.setMinValue(date);
            end.validate();
          }
        }
        /*
        * Always return true since we're only using this vtype to set the
        * min/max allowed values (these are tested for after the vtype test)
        */
        return true;
      }
    });

    Ext.override(Ext.form.field.ComboBox, {
      assertValue: function () {
        var me = this,
            value = me.getRawValue(),
            rec;

        if (me.multiSelect) {
          // For multiselect, check that the current displayed value matches the current
          // selection, if it does not then revert to the most recent selection.
          if (value !== me.getDisplayValue()) {
            me.setValue(me.lastSelection);
          }
        } else {
          // For single-select, match the displayed value to a record and select it,
          // If no value and we're allowing blank, clear the current value.
          // if it does not match a record then revert to the most recent selection.
          if (!value.length && me.allowBlank) {
            me.setValue(null);
          } else {
            rec = me.findRecordByDisplay(value);
            if (rec) {
              me.select(rec);
            } else {
              me.setValue(me.lastSelection);
            }
          }
        }
        me.collapse();
      }
    });

    Ext.onReady(function () {
      Ext.tip.QuickTipManager.init();

      Ext.define('ModDeal', {
        extend: 'Ext.data.Model',
        idProperty: 'ModDealID',
        fields: [
          { name: 'ModDealID', type: 'int' },
          { name: 'DealDate', type: 'date', dateFormat: 'c' },
          { name: 'DealPrice', type: 'number' },
          { name: 'Direction', type: 'int', allowNull: true, allowBlank: false },
          { name: 'Dir', calculate: function (data) { return data.Direction === 0 ? 'B' : 'S'; } },
          { name: 'FinInstID', type: 'int', allowNull: true },
          { name: 'FundID', type: 'int' },
          { name: 'InDateTime', type: 'date', dateFormat: 'c', persist: false },
          { name: 'Num', type: 'number' },
          { name: 'PortfolioID', type: 'int', allowNull: true },
          { name: 'Qty', type: 'number' },
          { name: 'AccInt', type: 'number' },
          { name: 'SecurityID', type: 'int' },
          { name: 'SupplyDate', type: 'date', dateFormat: 'c' },
          { name: 'SupplyDateT', type: 'int', persist: false },
          { name: 'TreatyID', type: 'int' },
          { name: 'UserId', type: 'string' },
          { name: 'ValueDate', type: 'date', dateFormat: 'c' },
          { name: 'ValueDateT', type: 'int', persist: false },
          { name: 'SecName', type: 'string', persist: false },
          { name: 'ISIN', type: 'string', persist: false },
          { name: 'ClientName', type: 'string', persist: false },
          { name: 'TreatyName', type: 'string', persist: false },
          { name: 'Fund', type: 'string', persist: false },
          { name: 'PortfName', type: 'string', persist: false },
          { name: 'DealTypeID', type: 'int' },
          { name: 'DealType', calculate: function (data) { return data.DealTypeID === 1 ? 'Биржа' : data.DealTypeID === 2 ? 'Внебиржа' : 'N/a'; } },
          { name: 'CreateDate', type: 'date', dateFormat: 'c' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          api: {
            read: '@Url.Action("getModDeal")',
            create: '@Url.Action("addModDeal")',
            update: '@Url.Action("updModDeal")',
            destroy: '@Url.Action("delModDeal")'
          },
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          writer: {
            type: 'json',
            rootProperty: 'data',
            writeAllFields: true,
            allowSingle: false,
            encode: false
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeModDeal',
        model: 'ModDeal'
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeTreaty',
        idProperty: 'TreatyID',
        fields: [
          { name: 'TreatyID', type: 'int' },
          { name: 'TreatyName', type: 'string' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getTreatyByPortfClientList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeFund',
        idProperty: 'id',
        fields: [
          { name: 'id', type: 'int' },
          { name: 'name', type: 'string' }
        ],
        autoLoad: true,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getFundList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.define('CheckDeclModDeal', {
        extend: 'Ext.data.Model',
        fields: [
          { name: 'TreatyName', type: 'string' },
          { name: 'FinInstName', type: 'string' },
          { name: 'IDName', type: 'string' },
          { name: 'NameWhere', type: 'string' },
          { name: 'StartValue', type: 'number' },
          { name: 'StopValue', type: 'number' },
          { name: 'coef', type: 'number' },
          { name: 'numerator', type: 'number' },
          { name: 'denominator', type: 'number' },
          { name: 'Num', type: 'number' },
          { name: 'Course', type: 'number' },
          { name: 'Qty', type: 'number' },
          { name: 'coefS', type: 'number' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("CheckDeclModDeal")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          }
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeCheckDeclModDeal',
        model: 'CheckDeclModDeal'
      });

      Ext.define('ModDeal.Win', {
        extend: 'Ext.window.Window',
        alias: 'widget.moddealwin',

        initComponent: function () {
          Ext.apply(this, {
            width: 600,
            closeAction: 'hide',
            modal: true,
            buttonAlign: 'center',
            items: [{
              xtype: 'form',
              border: false,
              defaults: { anchor: '100%' },
              bodyPadding: 10,
              activeRecord: null,
              fieldDefaults: {
                labelAlign: 'right',
                msgTarget: 'side'
              },
              items: [{
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  name: 'PortfName',
                  fieldLabel: 'Портфель',
                  xtype: 'textfield',
                  readOnly: true,
                  flex: 1
                }, {
                  xtype: 'button',
                  text: '>',
                  scope: this,
                  handler: this.onShowPortf
                }, {
                  xtype: 'button',
                  text: 'X',
                  scope: this,
                  handler: this.onClearPortf
                }]
              }, {
                xtype: 'hidden',
                name: 'PortfolioID'
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  name: 'ClientName',
                  fieldLabel: 'Клиент',
                  xtype: 'textfield',
                  readOnly: true,
                  flex: 1
                }, {
                  xtype: 'button',
                  text: '>',
                  scope: this,
                  handler: this.onShowClient
                }, {
                  xtype: 'button',
                  text: 'X',
                  scope: this,
                  handler: this.onClearClient
                }, {
                  xtype: 'hidden',
                  name: 'FinInstID'
                }]
              }, {
                name: 'TreatyID',
                fieldLabel: 'Договор',
                allowBlank: false,
                xtype: 'combobox',
                store: 'storeTreaty',
                displayField: 'TreatyName',
                valueField: 'TreatyID',
                typeAhead: true,
                queryMode: 'local',
                selectOnFocus: true,
                listeners: {
                  beforerender: function () {
                    //this.store.load();
                  }
                }
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  name: 'SecName',
                  fieldLabel: 'ЦБ',
                  xtype: 'textfield',
                  readOnly: true,
                  allowBlank: false,
                  flex: 1
                }, {
                  xtype: 'button',
                  text: '>',
                  scope: this,
                  handler: this.onShowSec
                }, {
                  xtype: 'hidden',
                  name: 'SecurityID'
                }]
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  xtype: 'radiogroup',
                  fieldLabel: 'Направление',
                  allowBlank: false,
                  items: [{
                    boxLabel: 'Покупка',
                    name: 'Direction',
                  margin: '0 15 0 0',
                    inputValue: '0'
                  }, {
                    boxLabel: 'Продажа',
                    name: 'Direction',
                    inputValue: '1'
                  }]
                }]
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  name: 'FundID',
                  fieldLabel: 'Валюта',
                  xtype: 'combo',
                  store: 'storeFund',
                  displayField: 'name',
                  valueField: 'id',
                  typeAhead: true,
                  queryMode: 'local',
                  allowBlank: false,
                  selectOnFocus: true
                }, {
                  name: 'DealTypeID',
                  fieldLabel: 'Тип',
                  xtype: 'combo',
                  store: {
                    xtype: 'store',
                    fields: ['id', 'name'],
                    data: [[1, 'Биржа'], [2, 'Внебиржа']],
                    idProperty: 'id'
                  },
                  displayField: 'name',
                  valueField: 'id',
                  typeAhead: true,
                  queryMode: 'local',
                  allowBlank: false,
                  labelAlign: 'right',
                  selectOnFocus: true
                }]
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  xtype: 'datefield',
                  width: 198,
                  format: 'd.m.Y',
                  name: 'DealDate',
                  itemId: 'DealDate',
                  fieldLabel: 'Дата',
                  allowBlank: false,
                  startDay: 1,
                  vtype: 'daterange'
                }]
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  xtype: 'datefield',
                  labelWidth: 100,
                  width: 198,
                  format: 'd.m.Y',
                  name: 'SupplyDate',
                  fieldLabel: 'Поставка',
                  allowBlank: false,
                  startDay: 1,
                  vtype: 'daterange',
                  startDateField: 'DealDate',
                  listeners: {
                    scope: this,
                    blur: function (me) {
                      this.onChangeD(me, 'SupplyDateT');
                    },
                    select: function (me) {
                      this.onChangeD(me, 'SupplyDateT');
                    }
                  }
                }, {
                  xtype: 'numberfield',
                  labelWidth: 25,
                  width: 70,
                  labelAlign: 'right',
                  minValue: 0,
                  name: 'SupplyDateT',
                  fieldLabel: 'T+',
                  listeners: {
                    scope: this,
                    blur: function (me) {
                      this.onChangeT(me, 'SupplyDate');
                    },
                    spinend: function (me) {
                      this.onChangeT(me, 'SupplyDate');
                    }
                  }
                }]
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  xtype: 'datefield',
                  labelWidth: 100,
                  width: 198,
                  format: 'd.m.Y',
                  name: 'ValueDate',
                  fieldLabel: 'Оплата',
                  allowBlank: false,
                  startDay: 1,
                  vtype: 'daterange',
                  startDateField: 'DealDate',
                  listeners: {
                    scope: this,
                    blur: function (me) {
                      this.onChangeD(me, 'ValueDateT');
                    },
                    select: function (me) {
                      this.onChangeD(me, 'ValueDateT');
                    }
                  }
                }, {
                  xtype: 'numberfield',
                  labelWidth: 25,
                  width: 70,
                  labelAlign: 'right',
                  minValue: 0,
                  name: 'ValueDateT',
                  fieldLabel: 'T+',
                  listeners: {
                    scope: this,
                    blur: function (me) {
                      this.onChangeT(me, 'ValueDate');
                    },
                    spinend: function (me) {
                      this.onChangeT(me, 'ValueDate');
                    }
                  }
                }]
              }, {
                xtype: 'fieldcontainer',
                layout: 'hbox',
                items: [{
                  xtype: 'numberfield',
                  labelWidth: 100,
                  width: 198,
                  minValue: 0,
                  name: 'DealPrice',
                  fieldLabel: 'Цена',
                  allowBlank: false,
                  hideTrigger: true,
                  keyNavEnabled: false,
                  mouseWheelEnabled: false,
                  decimalPrecision: 6,
                  decimalSeparator: '.',
                  listeners: {
                    //scope: this,
                    blur: this.onCalcQty
                  }
                }, {
                  xtype: 'numberfield',
                  labelWidth: 80,
                  width: 158,
                  labelAlign: 'right',
                  minValue: 0,
                  name: 'Num',
                  fieldLabel: 'Количество',
                  allowBlank: false,
                  hideTrigger: true,
                  keyNavEnabled: false,
                  mouseWheelEnabled: false,
                  decimalPrecision: 6,
                  decimalSeparator: '.',
                  listeners: {
                    //scope: this,
                    blur: this.onCalcQty
                  }
                }, {
                  xtype: 'numberfield',
                  labelWidth: 50,
                  width: 158,
                  labelAlign: 'right',
                  minValue: 0,
                  name: 'Qty',
                  fieldLabel: 'Объём',
                  hideTrigger: true,
                  keyNavEnabled: false,
                  mouseWheelEnabled: false,
                  decimalPrecision: 2,
                  decimalSeparator: '.'
                }, {
                  xtype: 'button',
                  text: 'Задать',
                  //scope: this,
                  handler: this.onSetNum
                }]
              }]
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'bottom',
              ui: 'footer',
              items: ['->', {
                iconCls: 'icon-save',
                itemId: 'save',
                text: 'Сохранить',
                disabled: true,
                scope: this,
                handler: this.onSave
              }, {
                  text: 'Отмена',
                  scope: this,
                  handler: this.onCancel
                }]
            }]
          });
          this.callParent();
        },

        onSetNum: function () {
          var me = this;
          var form = me.up('form').getForm();
          var dt = form.findField('DealDate').getValue();
          var SecID = form.findField('SecurityID').getValue();
          var DealPerice = form.findField('DealPrice').getValue();
          var Num = form.findField('Num').getValue();
          var Qty = form.findField('Qty').getValue();
          var FundID = form.findField('FundID').getValue();
          Ext.Ajax.request({
            url: '@Url.Action("getModDealSetNum")',
            timeout: 60000,
            params: {
              SecurityID: SecID,
              Qty: Qty,
              DealDate: dt,
              Price: DealPerice,
              Num: Num,
              FundID: FundID
            },
            success: function (response) {
              var jr = Ext.decode(response.responseText);
              if (jr.success === true) {
                form.findField('Num').setValue(Ext.decode(response.responseText).data.Num);
                form.findField('Qty').setValue(Ext.decode(response.responseText).data.Qty);
              }
            },
            scope: this,
            failure: function (response) {
              alert('Ошибка!');
            }

          });
        },

        onCalcQty: function () {
          var me = this;
          var form = me.up('form').getForm();
          var dt = form.findField('DealDate').getValue();
          var SecID = form.findField('SecurityID').getValue();
          var DealPerice = form.findField('DealPrice').getValue();
          var Num = form.findField('Num').getValue();
          var FundID = form.findField('FundID').getValue();
          Ext.Ajax.request({
            url: '@Url.Action("getModDealQty")',
            timeout: 60000,
            params: {
              SecurityID: SecID,
              Num: Num,
              DealDate: dt,
              Price: DealPerice,
              FundID: FundID
            },
            success: function (response) {
              var jr = Ext.decode(response.responseText);
              if (jr.success === true)
                form.findField('Qty').setValue(Ext.decode(response.responseText).data);
            },
            scope: this,
            failure: function (response) {
              alert('Ошибка!');
            }

          });
        },

        onChangeT: function (me, dt) {
          Ext.Ajax.request({
            url: '@Url.Action("getWorkDateT", "Home", new { area = "" })',
            params: {
              dt: me.up('form').getForm().findField('DealDate').getValue(),
              t: me.getValue()
            },
            success: function (response) {
              if (Ext.decode(response.responseText).wdt)
                me.up('form').getForm().findField(dt).setValue(new Date(Ext.decode(response.responseText).wdt));
              else
                Ext.Msg.alert('Error', 'Ошибка.');
            },
            failure: function (f, a) {
              Ext.Msg.alert('Error', 'Ошибка.');
            }
          });
        },

        onChangeD: function (me, dt) {
          Ext.Ajax.request({
            url: '@Url.Action("getTBetweenWorkDates", "Home", new { area = "" })',
            params: {
              dt1: me.up('form').getForm().findField('DealDate').getValue(),
              dt2: me.getValue()
            },
            success: function (response) {
              if (Ext.decode(response.responseText).t >= 0)
                me.up('form').getForm().findField(dt).setValue(Ext.decode(response.responseText).t);
              else
                Ext.Msg.alert('Error', 'Ошибка.');
            },
            failure: function (f, a) {
              Ext.Msg.alert('Error', 'Ошибка.');
            }
          });
        },

        onShowPortf: function () {
          var w = Ext.create('Ext.window.Window', {
            scope: this,
            title: 'Портфели',
            modal: true,
            width: 1000,
            height: window.innerHeight-20,
            layout: 'fit',
            items: [{
              xtype: 'portfoliogrid'
            }],
            listeners: {
              scope: this,
              sel: function (text, id) {
                this.down('form').getForm().findField('PortfName').setValue(text);
                this.down('form').getForm().findField('PortfolioID').setValue(id);
                this.onRefreshTreaty(true);
                w.close();
              }
            }
          }).show(this);
        },

        onClearPortf: function () {
          this.down('form').getForm().findField('PortfName').setValue('');
          this.down('form').getForm().findField('PortfolioID').setValue(null);
        },

        onShowClient: function () {
          var w = Ext.create('Ext.window.Window', {
            scope: this,
            title: 'Клиенты',
            modal: true,
            width: 1000,
            height: window.innerHeight-20,
            layout: 'fit',
            items: [{
              xtype: 'clientgrid'
            }],
            listeners: {
              scope: this,
              sel: function (text, id) {
                var f = this.down('form').getForm();
                f.findField('ClientName').setValue(text);
                f.findField('FinInstID').setValue(id);
                this.onRefreshTreaty(true);
                w.close();
              }
            }
          }).show(this);
        },

        onClearClient: function () {
          this.down('form').getForm().findField('ClientName').setValue('');
          this.down('form').getForm().findField('FinInstID').setValue(null);
        },

        onShowSec: function () {
          var w = Ext.create('Ext.window.Window', {
            scope: this,
            title: 'ЦБ',
            modal: true,
            width: 1100,
            height: window.innerHeight-20,
            layout: 'fit',
            items: [{
              xtype: 'secgrid'
            }],
            listeners: {
              scope: this,
              sel: function (text, id, fid) {
                var f = this.down('form').getForm();
                f.findField('SecName').setValue(text);
                f.findField('SecurityID').setValue(id);
                f.findField('FundID').setValue(fid);
                //this.onRefreshTreaty();
                w.close();
              }
            }
          }).show(this);
        },

        onRefreshTreaty: function (IsClear) {
          var f = this.down('form').getForm();
          var c = f.findField('TreatyID');
          //var v = c.getValue();
          if (IsClear)
            c.setValue(null);

          c.store.proxy.extraParams = { PortfolioID: f.findField('PortfolioID').getValue(), FinInstID: f.findField('FinInstID').getValue() };
          c.store.load(function (records) {
            //if (records.length > 0)
            //  c.setValue(v);
          });
        },

        setActiveRecord: function (record) {
          this.activeRecord = record;
          if (record) {
            this.down('#save').enable();
            this.down('form').getForm().reset(true).loadRecord(record);
            this.onRefreshTreaty(false);
          } else {
            this.down('#save').disable();
            this.down('form').getForm().reset();
          }
        },

        onSave: function () {
          var active = this.activeRecord, form = this.down('form').getForm();
          if (!active) {
            return;
          }
          if (form.isValid()) {
            if (this.title === 'Добавить')
              this.fireEvent('create', this, form.getValues(false, false, false, true));
            else {
              form.updateRecord(active);
              this.fireEvent('update');
            }
            this.hide();
          }
        },

        onCancel: function () {
          this.hide();
        }
      });

      Ext.define('Client', {
        extend: 'Ext.data.Model',
        idProperty: 'FinInstID',
        fields: [
          { name: 'FinInstID', type: 'int' },
          { name: 'Name', type: 'string' },
          { name: 'INN', type: 'string' },
          { name: 'KPP', type: 'string' },
          { name: 'Name1', type: 'string' }
        ],
        autoLoad: false
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeClient',
        model: 'Client',
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getClientList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.define('ClientGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.clientgrid',
        initComponent: function () {
          Ext.apply(this, {
            store: 'storeClient',
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              flex: 1
            }, {
              dataIndex: 'INN',
              header: 'ИНН',
              width: 110
            }, {
              dataIndex: 'KPP',
              header: 'КПП',
              width: 110
            }, {
              dataIndex: 'Name1',
              header: 'Наименование2',
              flex: 1
            }, {
              dataIndex: 'FinInstID',
              header: 'ID',
              width: 20
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, {
                xtype: 'tbtext',
                text: ' Все: '
              }, {
                xtype: 'checkbox',
                itemId: 'cbAll'
              }, '-', {
                iconCls: 'icon-refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: {
                  fn: this.onRefreshClick
                },
                itemdblclick: {
                  fn: this.onSelect
                },
                itemclick: {
                  fn: this.onSelectChange
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = {
            filter: this.down('#tfFind').getValue(),
            all: this.down('#cbAll').getValue(),
          };
          this.store.load();
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('FinInstID'));
          return false;
        }
      });

      Ext.define('Portfolio', {
        extend: 'Ext.data.Model',
        idProperty: 'PortfolioID',
        fields: [
          { name: 'PortfolioID', type: 'int' },
          { name: 'Name', type: 'string' },
          { name: 'PortfolioTypeID', type: 'int' },
          { name: 'PortfolioType', type: 'string', persist: false }
        ]
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storePortType',
        idProperty: 'PortfolioTypeID',
        fields: [
          { name: 'PortfolioTypeID', type: 'int' },
          { name: 'Name', type: 'string' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getPortfolioTypeList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storePortfolio',
        model: 'Portfolio',
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getPortfolioList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.define('PortfolioGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.portfoliogrid',
        initComponent: function () {
          Ext.apply(this, {
            store: 'storePortfolio',
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              flex: 3
            }, {
              dataIndex: 'PortfolioType',
              header: 'Тип',
              flex: 1
            }, {
              dataIndex: 'PortfolioID',
              header: 'ID',
              width: 20
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, '-', ' Тип: ', {
                itemId: 'cbType',
                xtype: 'combobox',
                store: 'storePortType',
                displayField: 'Name',
                valueField: 'PortfolioTypeID',
                typeAhead: true,
                queryMode: 'local',
                emptyText: '*',
                selectOnFocus: true,
                width: 180,
                listeners: {
                  beforerender: function () {
                    this.store.load();
                  }
                }
              }, ' ', {
                iconCls: 'icon-refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: {
                  fn: this.onRefreshClick
                },
                itemdblclick: {
                  fn: this.onSelect
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = { TypeID: this.down('#cbType').getValue(), filter: this.down('#tfFind').getValue() };
          this.store.load();
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('PortfolioID'));
          return false;
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeSec',
        idProperty: 'SecurityID',
        fields: [
          { name: 'SecurityID', type: 'int' },
          { name: 'Name', type: 'string' },
          { name: 'ISIN', type: 'string' },
          { name: 'SecType', type: 'string' },
          { name: 'DateEnd', type: 'date', dateFormat: "c", persist: false },
          { name: 'NominalFundID', type: 'int' },
          { name: 'Issuer', type: 'string' },
          { name: 'IssuerINN', type: 'string' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getSec")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.define('SecGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.secgrid',
        initComponent: function () {
          Ext.apply(this, {
            store: 'storeSec',
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              flex: 1
            }, {
              dataIndex: 'ISIN',
              header: 'ISIN',
              width: 120
            }, {
              dataIndex: 'RegNumber',
              header: 'Рег.номер',
              width: 120
            }, {
              dataIndex: 'SecType',
              header: 'Тип'
            }, {
              dataIndex: 'DateEnd',
              header: 'Погашение',
              renderer: Ext.util.Format.dateRenderer('d.m.Y')
            }, {
              dataIndex: 'Issuer',
              header: 'Эмитент',
              flex: 1
            }, {
              dataIndex: 'IssuerINN',
              header: 'ИНН'
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, '-', {
                iconCls: 'icon-refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: {
                  fn: this.onRefreshClick
                },
                itemdblclick: {
                  fn: this.onSelect
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = {
            filter: this.down('#tfFind').getValue()
          };
          this.store.load();
        },

        onSelect: function (view, record, item, index, e) {
          this.up('window').fireEvent('sel', record.get('Name'), record.get('SecurityID'), record.get('NominalFundID'));
          return false;
        }
      });

      Ext.define('ModDealGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.moddealgrid',
        initComponent: function () {
          Ext.apply(this, {
            columns: [{
              dataIndex: 'PortfName',
              header: 'Портфель',
              width: 120
            }, {
              dataIndex: 'TreatyName',
              header: 'Договор',
              width: 120
            }, {
              dataIndex: 'ClientName',
              header: 'Клиент',
              width: 120
            }, {
              dataIndex: 'SecName',
              header: 'Актив',
              width: 120
            }, {
              dataIndex: 'Fund',
              header: 'Валюта',
              width: 120
            }, {
              dataIndex: 'Dir',
              header: 'B/S',
              width: 40
            }, {
              dataIndex: 'DealType',
              header: 'Тип',
              width: 120
            }, {
              header: 'Дата',
              xtype: 'datecolumn',
              format: 'd.m.Y',
              dataIndex: 'DealDate',
              width: 100
            }, {
              header: 'Оплата',
              xtype: 'datecolumn',
              format: 'd.m.Y',
              dataIndex: 'ValueDate',
              width: 100
            }, {
              header: 'Поставка',
              xtype: 'datecolumn',
              format: 'd.m.Y',
              dataIndex: 'SupplyDate',
              width: 100
            }, {
              dataIndex: 'DealPrice',
              header: 'Цена',
              width: 120,
              xtype: 'numbercolumn',
              align: 'end'
            }, {
              dataIndex: 'Num',
              header: 'Кол-во',
              width: 120,
              xtype: 'numbercolumn',
              align: 'end'
            }, {
              dataIndex: 'Qty',
              header: 'Стоимость',
              width: 120,
              xtype: 'numbercolumn',
              format: '0.00',
              align: 'end'
            }, {
              dataIndex: 'ModDealID',
              header: 'ID',
              hidden: true,
              width: 30
            }, {
              dataIndex: 'TreatyID',
              hidden: true,
              header: 'TreatyID',
              width: 30
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{ text: ' Все: ' }, {
                xtype: 'checkbox',
                itemId: 'cbAll'
              }, {
                iconCls: 'icon-refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }, {
                iconCls: 'icon-add',
                text: 'Добавить',
                scope: this,
                handler: this.onAddClick
              }, {
                text: 'Изменить',
                disabled: true,
                itemId: 'change',
                scope: this,
                handler: this.onChangeClick
              }, {
                iconCls: 'icon-delete',
                text: 'Удалить',
                disabled: true,
                itemId: 'delete',
                scope: this,
                handler: this.onDeleteClick
              }, {
                text: 'Проверить',
                disabled: true,
                itemId: 'check',
                scope: this,
                handler: this.onCheckClick
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                itemclick: this.onSelectChange,
                itemdblclick: this.onChangeClick,
              }
            }
          });
          this.callParent();
        },

        loadCheckDeclModDeal: function () {
          var store = Ext.data.StoreManager.lookup('storeCheckDeclModDeal');
          store.proxy.extraParams = { dt: this.getSelectionModel().getSelection()[0].get('CreateDate') };
          return new Ext.Promise(function (resolve, reject) {
            store.load({
              callback: function (records, operation, success) {
                if (success) {
                  resolve(records);
                }
                else {
                  reject('Error CheckDecl');
                }
              }
            });
          });
        },

        onCheckClick: function () {
          var me = this;
          Ext.Msg.confirm('Проверка', "Проверить сделку?",
            function (btn, text) {
              if (btn == 'yes') {
                me.loadCheckDeclModDeal().then(
                  function (records) {
                    if (records.length === 0) {
                      Ext.Msg.alert('Info', 'Проверка выполнена, нарушений нет');
                    }
                    else {
                      var w = Ext.create('Ext.window.Window', {
                        scope: me,
                        title: 'Кол-во нарушений: ' + records.length,
                        modal: true,
                        width: 1000,
                        height: window.innerHeight - 100,
                        layout: 'fit',
                        items: [{
                          xtype: 'checkdeclgrid',
                          store: 'storeCheckDeclModDeal'
                        }],
                        listeners: {
                          scope: me,
                          clo: function () {
                            w.close();
                          }
                        }
                      }).show(me);
                    }
                  },
                  function (error) {
                    Ext.Msg.alert('Info', 'Проверка не выполнена');
                  }
                );
              }
            }
          );
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = { All: this.down('#cbAll').getValue() };
          this.store.load();
        },

        onSelectChange: function (selModel, selections) {
          this.down('#delete').setDisabled(selections.length === 0);
          this.down('#change').setDisabled(selections.length === 0);
          this.down('#check').setDisabled(selections.length === 0);
        },

        onAddClick: function () {
          var rec = Ext.create('ModDeal', { DealDate: Ext.Date.add(Ext.Date.clearTime(new Date(), false)) });
          rec.data.SupplyDate = rec.data.DealDate;
          rec.data.ValueDate = rec.data.DealDate;

          if (!this.wini) {
            this.onCreateWin();
          }
          this.wini.setTitle('Добавить');
          this.wini.setActiveRecord(rec);
          this.wini.show(this);
        },

        onChangeClick: function () {
          if (!this.wini) {
            this.onCreateWin();
          }
          this.wini.setTitle('Изменить');
          this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
          this.wini.show(this);
        },

        onCreateWin: function () {
          this.wini = Ext.create('ModDeal.Win', {
            scope: this,
            listeners: {
              scope: this,
              create: function (form, data) {
                this.store.insert(0, data);
                this.store.sync();
              },
              update: function () {
                this.store.sync();
              }
            }
          });
        },

        onDeleteClick: function () {
          var me = this;
          var selection = this.getView().getSelectionModel().getSelection()[0];
          if (selection) {
            if (window.confirm('Удалить стр.?')) {
              selection.dropped = true;
              selection.save({
                success: function () {
                  me.store.remove(selection);
                },
                failure: function () {
                  selection.dropped = false;
                  alert('Запись не удалена');
                }
              });
            }
          }
        }
      });

      Ext.define('CheckDeclGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.checkdeclgrid',
        initComponent: function () {
          Ext.apply(this, {
            columns: [{
              dataIndex: 'TreatyName',
              header: 'Договор',
              width: 120
            }, {
              dataIndex: 'FinInstName',
              header: 'Клиент',
              width: 120
            }, {
              dataIndex: 'IDName',
              header: 'Декларация',
              width: 150
            }, {
              dataIndex: 'NameWhere',
              header: 'Условие',
              width: 100
            }, {
              dataIndex: 'StartValue',
              header: 'От',
              xtype: 'numbercolumn',
              width: 50
            }, {
              dataIndex: 'StopValue',
              header: 'до',
              xtype: 'numbercolumn',
              width: 50
            }, {
              dataIndex: 'coef',
              header: 'коэф',
              xtype: 'numbercolumn',
              format: '0.00#',
              width: 70
            }, {
              dataIndex: 'numerator',
              header: 'Числитель',
              xtype: 'numbercolumn',
              width: 100
            }, {
              dataIndex: 'denominator',
              header: 'Знаменатель',
              xtype: 'numbercolumn',
              width: 100
            }, {
              dataIndex: 'Num',
              header: 'Кол-во',
              width: 80
            }, {
              dataIndex: 'Course',
              header: 'Цена',
              width: 90
            }, {
              dataIndex: 'Qty',
              header: 'Стоимость',
              xtype: 'numbercolumn',
              width: 90
            }, {
              dataIndex: 'coefS',
              header: 'коэф',
              xtype: 'numbercolumn',
              format: '0.00#',
              width: 70
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                iconCls: 'icon-refresh',
                text: 'Закрыть',
                handler: this.onCloseClick,
                scope: this
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
              }
            }
          });
          this.callParent();
        },

        onCloseClick: function () {
          this.up('window').fireEvent('clo');
          return false;
        }
      });

      Ext.create('Ext.Viewport', {
        layout: 'border',
        items: [{
          region: 'north',
          border: false,
          contentEl: 'header'
        }, {
          xtype: 'tabpanel',
          tabPosition: 'top',
          region: 'center',
          activeTab: 0,
          frame: false,
          border: false,
          items: [{
            itemId: 'tcPort',
            title: 'Моделирование сделок',
            tag: 0,
            layout: 'border',
            items: [{
              region: 'center',
              xtype: 'moddealgrid',
              store: 'storeModDeal'
            }]
          }],
          listeners: {
          }
        }]
      });
    });
  </script>
}
