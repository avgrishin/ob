@{
  ViewBag.Title = "Справочники";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts {
  <style type="text/css">
    .icon-refresh
    {
      background-image: url(@Url.Content("~/Scripts/ExtJS62/build/classic/theme-crisp/resources/images/grid/refresh.png")) !important;
    }
  </style>
  <link rel="stylesheet" type="text/css" href="~/Scripts/ExtJS62/build/classic/theme-crisp/resources/theme-crisp-all.css" />
  <script type="text/javascript" src="~/Scripts/ExtJS62/ext-bootstrap.js"></script>

  <script type="text/javascript" src="~/Scripts/ExtJS62/build/classic/locale/locale-ru.js"></script>
  <script type="text/javascript" src="~/Scripts/ExtJS62/ux/Exporter.js"></script>

  <script type="text/javascript">

    Ext.override(Ext.form.field.ComboBox, {
      assertValue: function () {
        var me = this,
            value = me.getRawValue(),
            rec;

        if (me.multiSelect) {
          // For multiselect, check that the current displayed value matches the current
          // selection, if it does not then revert to the most recent selection.
          if (value !== me.getDisplayValue()) {
            me.setValue(me.lastSelection);
          }
        } else {
          // For single-select, match the displayed value to a record and select it,
          // If no value and we're allowing blank, clear the current value.
          // if it does not match a record then revert to the most recent selection.
          if (!value.length && me.allowBlank) {
            me.setValue(null);
          } else {
            rec = me.findRecordByDisplay(value);
            if (rec) {
              me.select(rec);
            } else {
              me.setValue(me.lastSelection);
            }
          }
        }
        me.collapse();
      }
    });

    Ext.onReady(function () {
      Ext.tip.QuickTipManager.init();

      Ext.define('Portfolio', {
        extend: 'Ext.data.Model',
        idProperty: 'PortfolioID',
        fields: [
          { name: 'PortfolioID', type: 'int' },
          { name: 'Name', type: 'string' },
          { name: 'PortfolioTypeID', type: 'int' },
          { name: 'PortfolioType', type: 'string', persist: false }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          api: {
            read: '@Url.Action("getPortfolioList")',
            create: '@Url.Action("addPortfolio")',
            update: '@Url.Action("updPortfolio")',
            destroy: '@Url.Action("delPortfolio")'
          },
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          writer: {
            type: 'json',
            rootProperty: 'data',
            writeAllFields: true,
            allowSingle: false,
            encode: false
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storePort',
        model: 'Portfolio'
      });

      Ext.define('TreatyPort', {
        extend: 'Ext.data.Model',
        idProperty: 'ID',
        fields: [
          { name: 'ID', type: 'int' },
          { name: 'PortfolioID', type: 'int', persist: false },
          { name: 'TreatyID', type: 'int', persist: false },
          { name: 'DateStart', type: 'date', dateFormat: 'c', persist: false },
          { name: 'DateFinish', type: 'date', dateFormat: 'c', persist: false },
          { name: 'TreatyName', type: 'string', persist: false },
          { name: 'ClientName', type: 'string', persist: false }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          api: {
            read: '@Url.Action("getTreatyByPortfolioList")',
            destroy: '@Url.Action("delTreatyPortfolio")'
          },
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          writer: {
            type: 'json',
            rootProperty: 'data',
            writeAllFields: true,
            allowSingle: false,
            encode: false
          },
          simpleSortMode: true
        }
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storeTreatyPort',
        model: 'TreatyPort'
      });

      Ext.create('Ext.data.Store', {
        storeId: 'storePortType',
        idProperty: 'PortfolioTypeID',
        fields: [
          { name: 'PortfolioTypeID', type: 'int' },
          { name: 'Name', type: 'string' }
        ],
        autoLoad: false,
        proxy: {
          type: 'ajax',
          actionMethods: { read: 'POST' },
          url: '@Url.Action("getPortfolioTypeList")',
          reader: {
            type: 'json',
            rootProperty: 'data'
          },
          simpleSortMode: true
        }
      });

      Ext.define('Portfolio.Win', {
        extend: 'Ext.window.Window',
        alias: 'widget.portfoliowin',

        initComponent: function () {
          Ext.apply(this, {
            width: 600,
            closeAction: 'hide',
            modal: true,
            buttonAlign: 'center',
            items: [{
              xtype: 'form',
              border: false,
              defaults: { anchor: '100%' },
              bodyPadding: 10,
              activeRecord: null,
              fieldDefaults: {
                labelAlign: 'left',
                msgTarget: 'side'
              },
              items: [{
                name: 'Name',
                fieldLabel: 'Наименование',
                xtype: 'textfield',
                allowBlank: false
              }, {
                name: 'PortfolioTypeID',
                fieldLabel: 'Тип',
                allowBlank: false,
                xtype: 'combobox',
                store: 'storePortType',
                displayField: 'Name',
                valueField: 'PortfolioTypeID',
                typeAhead: true,
                queryMode: 'local',
                selectOnFocus: true,
                listeners: {
                  beforerender: function () {
                    //this.store.load();
                  }
                }
              }]
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'bottom',
              ui: 'footer',
              items: ['->', {
                iconCls: 'icon-save',
                itemId: 'save',
                text: 'Сохранить',
                disabled: true,
                scope: this,
                handler: this.onSave
              }, {
                  text: 'Отмена',
                  scope: this,
                  handler: this.onCancel
                }]
            }]
          });
          this.callParent();
        },

        setActiveRecord: function (record) {
          this.activeRecord = record;
          if (record) {
            this.down('#save').enable();
            this.down('form').getForm().loadRecord(record);
          } else {
            this.down('#save').disable();
            this.down('form').getForm().reset();
          }
        },

        onSave: function () {
          var active = this.activeRecord, form = this.down('form').getForm();
          if (!active) {
            return;
          }
          if (form.isValid()) {
            if (this.title == 'Добавить')
              this.fireEvent('create', this, form.getValues(false, false, false, true));
            else {
              form.updateRecord(active);
              this.fireEvent('update');
            }
            this.hide();
          }
        },

        onCancel: function () {
          this.hide();
        }
      });

      Ext.define('PortfolioGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.portgrid',
        initComponent: function () {
          Ext.apply(this, {
            store: 'storePort',
            columns: [{
              dataIndex: 'Name',
              header: 'Наименование',
              flex: 3
            }, {
              dataIndex: 'PortfolioType',
              header: 'Тип',
              flex: 1
            }, {
              dataIndex: 'PortfolioID',
              header: 'ID',
              width: 20
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                xtype: 'tbtext',
                text: ' Поиск: '
              }, {
                xtype: 'textfield',
                itemId: 'tfFind'
              }, '-', ' Тип: ', {
                itemId: 'cbType',
                xtype: 'combobox',
                store: 'storePortType',
                displayField: 'Name',
                valueField: 'PortfolioTypeID',
                typeAhead: true,
                queryMode: 'local',
                emptyText: '*',
                selectOnFocus: true,
                width: 180,
                listeners: {
                  beforerender: function () {
                    this.store.load();
                  }
                }
              }, ' ', {
                iconCls: 'icon-refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }, {
                text: 'Добавить',
                handler: this.onAddClick,
                scope: this
              }, {
                text: 'Изменить',
                disabled: true,
                itemId: 'change',
                handler: this.onChangeClick,
                scope: this
              }, {
                iconCls: 'icon-delete',
                text: 'Удалить',
                disabled: true,
                itemId: 'delete',
                handler: this.onDeleteClick,
                scope: this
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                beforerender: {
                  fn: this.onRefreshClick
                },
                itemdblclick: {
                  fn: this.onDblClick
                },
                selectionchange: {
                  fn: this.onSelectChange
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.proxy.extraParams = {
            TypeID: this.down('#cbType').getValue(),
            filter: this.down('#tfFind').getValue()
          };
          this.store.load();
        },

        onDblClick: function (view, record, item, index, e) {
          var tabs = this.up('tabpanel')
          var tab = tabs.down('#tcTreaty')
          var grid = tab.down('treatygrid')
          grid.setTitle(record.get('Name'));
          grid.store.proxy.extraParams = { PortfolioID: record.get('PortfolioID') };
          grid.store.load();

          tab.tab.show();
          tabs.setActiveTab(tab);
          return false;
        },

        onAddClick: function () {
          var rec = Ext.create('Portfolio', { PortfolioTypeID: this.down('#cbType').getValue() });
          var wini = this.onCreateWin();
          wini.setTitle('Добавить');
          wini.setActiveRecord(rec);
          wini.show(this);
        },

        onChangeClick: function () {
          var wini = this.onCreateWin();
          wini.setTitle('Изменить');
          wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
          wini.show(this);
        },

        onCreateWin: function () {
          return Ext.create('Portfolio.Win', {
            scope: this,
            listeners: {
              scope: this,
              create: function (form, data) {
                this.store.insert(0, data);
                this.store.sync();
              },
              update: function () {
                this.store.sync();
              }
            }
          });
        },

        onSelectChange: function (selModel, selections) {
          this.down('#delete').setDisabled(selections.length === 0);
          this.down('#change').setDisabled(selections.length === 0);
        },

        onDeleteClick: function () {
          var me = this;
          var selection = this.getView().getSelectionModel().getSelection()[0];
          if (selection) {
            if (window.confirm('Удалить стр.?')) {
              selection.dropped = true;
              selection.save({
                success: function () {
                  me.store.remove(selection);
                },
                failure: function () {
                  selection.dropped = false;
                  Ext.Msg.alert('Error', 'Запись не удалена.');
                }
              });
            }
          }
        }
      });

      Ext.define('TreatyGrid.Grid', {
        extend: 'Ext.grid.Panel',
        alias: 'widget.treatygrid',
        initComponent: function () {
          Ext.apply(this, {
            columns: [{
              dataIndex: 'TreatyName',
              header: 'Наименование',
              width: 120
            }, {
              dataIndex: 'ClientName',
              header: 'Клиент',
              flex: 1
              }, {
                header: 'Начало',
                xtype: 'datecolumn',
                format: 'd.m.Y',
                dataIndex: 'DateStart',
                width: 100
              }, {
                header: 'Конец',
                xtype: 'datecolumn',
                format: 'd.m.Y',
                dataIndex: 'DateFinish',
                width: 100
              }, {
                dataIndex: 'ID',
                header: 'ID',
                hidden: true,
                width: 30
              }, {
              dataIndex: 'TreatyID',
                hidden: true,
                header: 'TreatyID',
              width: 30
            }],
            dockedItems: [{
              xtype: 'toolbar',
              dock: 'top',
              items: [{
                iconCls: 'icon-refresh',
                text: 'Обновить',
                handler: this.onRefreshClick,
                scope: this
              }, {
                iconCls: 'icon-delete',
                text: 'Удалить',
                disabled: true,
                itemId: 'delete',
                scope: this,
                handler: this.onDeleteClick
              }]
            }],
            viewConfig: {
              enableTextSelection: true,
              listeners: {
                scope: this,
                itemclick: {
                  fn: this.onSelectChange
                }
              }
            }
          });
          this.callParent();
        },

        onRefreshClick: function () {
          this.store.load();
        },

        onSelectChange: function (selModel, selections) {
          this.down('#delete').setDisabled(selections.length === 0);
        },

        onDeleteClick: function () {
          var me = this;
          var selection = this.getView().getSelectionModel().getSelection()[0];
          if (selection) {
            if (window.confirm('Удалить стр.?')) {
              selection.dropped = true;
              selection.save({
                success: function () {
                  me.store.remove(selection);
                },
                failure: function () {
                  selection.dropped = false;
                  alert('Запись не удалена');
                }
              });
            }
          }
        }
      });

      Ext.create('Ext.Viewport', {
        layout: 'border',
        items: [{
          region: 'north',
          border: false,
          contentEl: 'header'
        }, {
          xtype: 'tabpanel',
          tabPosition: 'top',
          region: 'center',
          activeTab: 0,
          frame: false,
          border: false,
          items: [{
            itemId: 'tcPort',
            title: 'Портфели',
            tag: 0,
            layout: 'border',
            items: [{
              region: 'center',
              xtype: 'portgrid',
              store: 'storePort'
            }]
          }, {
            itemId: 'tcTreaty',
            title: 'Договоры',
            tag: 1,
            hidden: true,
            layout: 'border',
            items: [{
              region: 'center',
              xtype: 'treatygrid',
              store: 'storeTreatyPort'
            }]
          }],
          listeners: {
            beforetabchange: function (tp, newTab, currentTab) {
              for (var i = 0; i < tp.items.length; i++) {
                if (newTab.tag < tp.items.items[i].tag)
                  tp.items.items[i].tab.hide();
              }
            }
          }
        }]
      });
    });
  </script>
}
