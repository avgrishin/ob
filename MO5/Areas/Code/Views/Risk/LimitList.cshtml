@{
  ViewBag.Title = "Лимитная ведомость";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts {
  <style type="text/css">
    .icon-add
    {
      background-image: url(@Href("~/Content/images/add.png")) !important;
    }
    .icon-save
    {
      background-image: url(@Href("~/Content/images/save.gif")) !important;
    }
    .upload-icon
    {
      background-image: url(@Href("~/Content/images/image_add.png")) !important;
    }
    .icon-delete
    {
      background-image: url(@Href("~/Content/images/delete.png")) !important;
    }
    .icon-refresh
    {
      background-image: url(@Href("~/Scripts/ExtJS62/build/classic/theme-gray/resources/images/grid/refresh.gif")) !important;
    }
    td.wrap-text div {
      white-space: normal;
    }
    .x-grid-row-summary .x-grid-cell-inner {
      font-weight: bold;
      font-size: 11px;
      color: #616161;
      font: bold 11px/13px tahoma, arial, verdana, sans-serif
    }
  </style>
  <link rel="stylesheet" type="text/css" href="~/Scripts/ExtJS62/build/classic/theme-gray/resources/theme-gray-all.css" />
  <script type="text/javascript" src="~/Scripts/ExtJS62/ext-bootstrap.js"></script>
  <script type="text/javascript" src="~/Scripts/ExtJS62/build/classic/locale/locale-ru.js"></script>
  <script type="text/javascript" src="~/Scripts/ExtJS62/ux/Exporter.js"></script>
  <script type="text/javascript">

    Ext.define('LimitList', {
      extend: 'Ext.data.Model',
      pageSize: 500,
      remoteSort: true,
      autoSync: false,
      autoLoad: false,
      idProperty: 'ID',
      fields: [
        { name: 'ID', type: 'int' },
        { name: 'EmitentID', type: 'int', allowNull: true },
        { name: 'FinGroup', type: 'string', perist: false },
        { name: 'FinName', type: 'string' },
        { name: 'INN', type: 'string' },
        { name: 'TypeID', type: 'int' },
        { name: 'TypeName', persist: false },
        { name: 'Value1', type: 'number' },
        { name: 'Value2', type: 'number' },
        { name: 'Value3', type: 'number' },
        { name: 'Value4', type: 'number' },
        { name: 'Value5', type: 'number' },
        {
          name: 'Value', type: 'number',
          convert: function (value, record) {
            return record.get('Value1') + record.get('Value2') + record.get('Value3') + record.get('Value4') + record.get('Value5');
          },
          depends: ['Value1', 'Value2', 'Value3', 'Value4', 'Value5']
        }
      ],
      proxy: {
        type: 'ajax',
        api: {
          read: '@Url.Action("getLimitList")',
          create: '@Url.Action("addLimitList")',
          update: '@Url.Action("updLimitList")',
          destroy: '@Url.Action("delLimitList")'
        },
        actionMethods: { read: 'POST' },
        reader: {
          type: 'json',
          rootProperty: 'data',
          totalProperty: 'totalCount'
        },
        writer: {
          type: 'json',
          rootProperty: 'data',
          writeAllFields: true,
          allowSingle: false,
          encode: false
        },
        simpleSortMode: true
      }
    });

    Ext.create('Ext.data.Store', {
      model: 'LimitList',
      groupField: 'FinGroup',
      storeId: 'storeLL1'
    });

    Ext.create('Ext.data.Store', {
      model: 'LimitList',
      groupField: 'FinGroup',
      storeId: 'storeLL2'
    });

    Ext.define('LimitList.Win', {
      extend: 'Ext.window.Window',
      alias: 'widget.limitlistwin',

      initComponent: function () {
        Ext.apply(this, {
          width: 600,
          closeAction: 'hide',
          modal: true,
          buttonAlign: 'center',
          items: [{
            xtype: 'form',
            border: false,
            defaults: { anchor: '100%' },
            bodyPadding: 10,
            activeRecord: null,
            fieldDefaults: {
              labelAlign: 'left',
              msgTarget: 'side'
            },
            items: [{
              xtype: 'hidden',
              name: 'TypeID'
            }, {
              xtype: 'fieldcontainer',
              layout: 'hbox',
              items: [{
                name: 'FinName',
                fieldLabel: 'Эмитент',
                xtype: 'textfield',
                readOnly: true,
                flex: 1
              }, {
                xtype: 'button',
                text: 'Выбрать',
                scope: this,
                handler: this.onShowEmitent
              }, {
                xtype: 'button',
                text: 'Очистить',
                scope: this,
                handler: this.onClearEmitent
              }]
            }, {
              xtype: 'hidden',
              name: 'EmitentID',
              listeners: {
                scope: this,
                change: function (me, newValue, oldValue) {
                  this.down('#btnSFG').setDisabled(!newValue);
                }
              }
            }, {
              xtype: 'fieldcontainer',
              layout: 'hbox',
              items: [{
                name: 'FinGroup',
                fieldLabel: 'Группа',
                xtype: 'textfield',
                readOnly: true,
                flex: 1
              }, {
                xtype: 'button',
                text: 'Выбрать',
                scope: this,
                itemId: 'btnSFG',
                handler: this.onShowFinGroup
              }]
            }, {
              xtype: 'fieldset',
              title: 'Лимиты',
              collapsible: false,
              layout: 'column',
              fieldDefaults: {
                labelAlign: 'top',
                msgTarget: 'side'
              },
              items: [{
                xtype: 'numberfield',
                width: 198,
                columnWidth: 0.5,
                minValue: 0,
                name: 'Value1',
                fieldLabel: 'На контрагента',
                hideTrigger: true,
                keyNavEnabled: false,
                mouseWheelEnabled: false,
                decimalPrecision: 2,
                decimalSeparator: '.',
                padding: '0 20 0 0'
              }, {
                xtype: 'numberfield',
                columnWidth: 0.5,
                width: 198,
                minValue: 0,
                name: 'Value2',
                fieldLabel: 'На долговые инструменты',
                hideTrigger: true,
                keyNavEnabled: false,
                mouseWheelEnabled: false,
                decimalPrecision: 2,
                decimalSeparator: '.',
                padding: '0 0 0 20'
              }, {
                xtype: 'numberfield',
                columnWidth: 0.5,
                minValue: 0,
                name: 'Value3',
                fieldLabel: 'На репо прямое',
                hideTrigger: true,
                keyNavEnabled: false,
                mouseWheelEnabled: false,
                decimalPrecision: 2,
                decimalSeparator: '.',
                padding: '0 20 10 0'
              }, {
                xtype: 'numberfield',
                columnWidth: 0.5,
                minValue: 0,
                name: 'Value4',
                fieldLabel: 'На репо обратное',
                hideTrigger: true,
                keyNavEnabled: false,
                mouseWheelEnabled: false,
                decimalPrecision: 2,
                decimalSeparator: '.',
                padding: '0 0 10 20'
              }]
            }]
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: ['->', {
              iconCls: 'icon-save',
              itemId: 'save',
              text: 'Сохранить',
              disabled: true,
              scope: this,
              handler: this.onSave
            }, {
                text: 'Отмена',
                scope: this,
                handler: this.onCancel
              }]
          }]
        });
        this.callParent();
      },

      onShowEmitent: function () {
        var w = Ext.create('Ext.window.Window', {
          scope: this,
          title: 'Эмитенты',
          modal: true,
          width: 1000,
          height: window.innerHeight - 20,
          layout: 'fit',
          items: [{
            xtype: 'emitgrid'
          }],
          listeners: {
            scope: this,
            sel: function (text, id, group) {
              this.down('form').getForm().findField('FinName').setValue(text);
              this.down('form').getForm().findField('EmitentID').setValue(id);
              this.down('form').getForm().findField('FinGroup').setValue(group);
              w.close();
            }
          }
        }).show(this);
      },

      onClearEmitent: function () {
        this.down('form').getForm().findField('FinName').setValue('');
        this.down('form').getForm().findField('EmitentID').setValue(null);
        this.down('form').getForm().findField('FinGroup').setValue('');
      },

      onShowFinGroup: function () {
        var w = Ext.create('Ext.window.Window', {
          scope: this,
          title: 'Группы эмитентов',
          modal: true,
          width: 1000,
          height: window.innerHeight - 20,
          layout: 'fit',
          items: [{
            xtype: 'gremitgrid'
          }],
          listeners: {
            scope: this,
            sel: function (text, id) {
              var me = this;
              Ext.Msg.show({
                title: 'Сохранить изменения?',
                message: 'Сохранить привязку "' + me.down('form').getForm().findField('FinName').getValue()+'" к "'+text+'"?',
                buttons: Ext.Msg.YESNO,
                icon: Ext.Msg.QUESTION,
                fn: function (btn) {
                  if (btn === 'yes') {
                    Ext.Ajax.request({
                      url: '@Url.Action("addEmitGroupLink")',
                      timeout: 60000,
                      params: {
                        EmitentID: me.down('form').getForm().findField('EmitentID').getValue(),
                        GroupID: id
                      },
                      success: function (response) {
                        var jr = Ext.decode(response.responseText);
                        console.log(jr);
                        if (jr.success === true) {
                          me.down('form').getForm().findField('FinGroup').setValue(text);
                        }
                      },
                      failure: function (response) {
                        alert('Ошибка!');
                      }
                    });
                  }
                }
              });

              w.close();
            }
          }
        }).show(this);
      },

      onRefreshGroup: function (IsClear) {
        var f = this.down('form').getForm();
        var c = f.findField('FinGroupID');
        //var v = c.getValue();
        if (IsClear)
          c.setValue(null);

        c.store.proxy.extraParams = { PortfolioID: f.findField('PortfolioID').getValue(), FinInstID: f.findField('FinInstID').getValue() };
        c.store.load(function (records) {
          //if (records.length > 0)
          //  c.setValue(v);
        });
      },

      setActiveRecord: function (record) {
        this.activeRecord = record;
        if (record) {
          this.down('#save').enable();
          this.down('form').getForm().reset(true).loadRecord(record);
          this.down('#btnSFG').setDisabled(!this.down('form').getForm().findField('EmitentID').getValue());
        } else {
          this.down('#save').disable();
          this.down('form').getForm().reset();
        }
      },

      onSave: function () {
        var active = this.activeRecord, form = this.down('form').getForm();
        if (!active) {
          return;
        }
        if (form.isValid()) {
          if (this.title === 'Добавить')
            this.fireEvent('create', this, form.getValues(false, false, false, true));
          else {
            form.updateRecord(active);
            this.fireEvent('update');
          }
          this.hide();
        }
      },

      onCancel: function () {
        this.hide();
      }
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeEmit',
      idProperty: 'FinInstID',
      fields: [
        { name: 'FinInstID', type: 'int' },
        { name: 'Name', type: 'string' },
        { name: 'INN', type: 'string' },
        { name: 'KPP', type: 'string' },
        { name: 'Name1', type: 'string' },
        { name: 'FinGroup', type: 'string' }
      ],
      autoLoad: false,
      proxy: {
        type: 'ajax',
        actionMethods: { read: 'POST' },
        url: '@Url.Action("getEmitentList")',
        reader: {
          type: 'json',
          rootProperty: 'data'
        },
        simpleSortMode: true
      }
    });

    Ext.define('EmitGrid.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.emitgrid',
      initComponent: function () {
        Ext.apply(this, {
          store: 'storeEmit',
          columns: [{
            dataIndex: 'Name',
            header: 'Наименование',
            flex: 1
          }, {
            dataIndex: 'INN',
            header: 'ИНН',
            width: 110
          }, {
            dataIndex: 'KPP',
            header: 'КПП',
            width: 110
          }, {
            dataIndex: 'Name1',
            header: 'Наименование2',
            flex: 1
          }, {
            dataIndex: 'FinGroup',
            header: 'Группа',
            flex: 1
          }, {
            dataIndex: 'FinInstID',
            header: 'ID',
            width: 20
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
              xtype: 'tbtext',
              text: ' Поиск: '
            }, {
              xtype: 'textfield',
              itemId: 'tfFind'
            }, '-', {
              iconCls: 'icon-refresh',
              itemId: 'refresh',
              text: 'Обновить',
              handler: this.onRefreshClick,
              scope: this
            }]
          }],
          viewConfig: {
            enableTextSelection: true,
            listeners: {
              scope: this,
              beforerender: {
                fn: this.onRefreshClick
              },
              itemdblclick: {
                fn: this.onSelect
              }
            }
          }
        });
        this.callParent();
      },

      onRefreshClick: function () {
        this.store.proxy.extraParams = {
          filter: this.down('#tfFind').getValue()
        };
        this.store.load();
      },

      onSelect: function (view, record, item, index, e) {
        this.up('window').fireEvent('sel', record.get('Name'), record.get('FinInstID'), record.get('FinGroup'));
        return false;
      }

    });

    Ext.define('GrEmit.Win', {
      extend: 'Ext.window.Window',
      alias: 'widget.gremitwin',

      initComponent: function () {
        Ext.apply(this, {
          width: 600,
          closeAction: 'hide',
          modal: true,
          buttonAlign: 'center',
          items: [{
            xtype: 'form',
            border: false,
            defaults: { anchor: '100%' },
            bodyPadding: 10,
            activeRecord: null,
            fieldDefaults: {
              labelAlign: 'left',
              msgTarget: 'side'
            },
            items: [{
                name: 'Name',
                fieldLabel: 'Наименование',
                xtype: 'textfield'
              }]
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: ['->', {
              iconCls: 'icon-save',
              itemId: 'save',
              text: 'Сохранить',
              disabled: true,
              scope: this,
              handler: this.onSave
            }, {
                text: 'Отмена',
                scope: this,
                handler: this.onCancel
              }]
          }]
        });
        this.callParent();
      },

      setActiveRecord: function (record) {
        this.activeRecord = record;
        if (record) {
          this.down('#save').enable();
          this.down('form').getForm().reset(true).loadRecord(record);
        } else {
          this.down('#save').disable();
          this.down('form').getForm().reset();
        }
      },

      onSave: function () {
        var active = this.activeRecord, form = this.down('form').getForm();
        if (!active) {
          return;
        }
        if (form.isValid()) {
          if (this.title === 'Добавить')
            this.fireEvent('create', this, form.getValues(false, false, false, true));
          else {
            form.updateRecord(active);
            this.fireEvent('update');
          }
          this.hide();
        }
      },

      onCancel: function () {
        this.hide();
      }
    });

    Ext.define('GrEmit', {
      extend: 'Ext.data.Model',
      idProperty: 'FinInstGroupID',
      fields: [
        { name: 'FinInstGroupID', type: 'int' },
        { name: 'Name', type: 'string' }
      ]
    });

    Ext.create('Ext.data.Store', {
      storeId: 'storeGrEmit',
      model: 'GrEmit',
      autoLoad: false,
      proxy: {
        type: 'ajax',
        actionMethods: { read: 'POST' },
        api: {
          read: '@Url.Action("getGrEmitList")',
          create: '@Url.Action("addGrEmit")',
          update: '@Url.Action("updGrEmit")',
          destroy: '@Url.Action("delGrEmit")'
        },
        reader: {
          type: 'json',
          rootProperty: 'data'
        },
        writer: {
          type: 'json',
          rootProperty: 'data',
          writeAllFields: true,
          allowSingle: false,
          encode: false
        },
        simpleSortMode: true
      }
    });

    Ext.define('GrEmitGrid.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.gremitgrid',
      initComponent: function () {
        Ext.apply(this, {
          store: 'storeGrEmit',
          columns: [{
            dataIndex: 'Name',
            header: 'Наименование',
            flex: 1
          }, {
            dataIndex: 'FinInstGroupID',
            header: 'ID',
            width: 20
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
              xtype: 'tbtext',
              text: ' Поиск: '
            }, {
              xtype: 'textfield',
              itemId: 'tfFind'
            }, '-', {
              iconCls: 'icon-refresh',
              itemId: 'refresh',
              text: 'Обновить',
              handler: this.onRefreshClick,
              scope: this
            }, {
              iconCls: 'icon-add',
              text: 'Добавить',
              scope: this,
              handler: this.onAddClick
            }, {
              text: 'Изменить',
              disabled: true,
              itemId: 'change',
              scope: this,
              handler: this.onChangeClick
            }, {
              iconCls: 'icon-delete',
              text: 'Удалить',
              disabled: true,
              itemId: 'delete',
              scope: this,
              handler: this.onDeleteClick
            }]
          }],
          viewConfig: {
            enableTextSelection: true,
            listeners: {
              scope: this,
              beforerender: this.onRefreshClick,
              itemdblclick: this.onSelect,
              selectionchange: this.onSelectChange
            }
          }
        });
        this.callParent();
      },

      onRefreshClick: function () {
        this.store.proxy.extraParams = {
          filter: this.down('#tfFind').getValue()
        };
        this.store.load();
      },

      onSelectChange: function (selModel, selections) {
        this.down('#delete').setDisabled(selections.length === 0);
        this.down('#change').setDisabled(selections.length === 0);
      },

      onAddClick: function () {
        var rec = Ext.create('GrEmit', { });
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Добавить');
        this.wini.setActiveRecord(rec);
        this.wini.show(this);
      },

      onChangeClick: function () {
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Изменить');
        this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
        this.wini.show(this);
      },

      onCreateWin: function () {
        this.wini = Ext.create('GrEmit.Win', {
          scope: this,
          listeners: {
            scope: this,
            create: function (form, data) {
              this.store.insert(0, data);
              this.store.sync();
            },
            update: function () {
              this.store.sync();
            }
          }
        });
      },

      onDeleteClick: function () {
        var me = this;
        var selection = this.getView().getSelectionModel().getSelection()[0];
        if (selection) {
          if (window.confirm('Удалить стр.?')) {
            selection.dropped = true;
            selection.save({
              success: function () {
                me.store.remove(selection);
              },
              failure: function () {
                selection.dropped = false;
                alert('Запись не удалена');
              }
            });
          }
        }
      },

      onSelect: function (view, record, item, index, e) {
        this.up('window').fireEvent('sel', record.get('Name'), record.get('FinInstGroupID'));
        return false;
      }

    });

    Ext.define('LimitList.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.limitlistgrid',
      initComponent: function () {
        Ext.apply(this, {
          features: [{
            ftype: 'groupingsummary',
            //groupHeaderTpl: '{columnName}: {name}',
            collapsible: false,
            hideGroupedHeader: true,
            enableGroupingMenu: false,
            showSummaryRow: true
          }],
          columns: [{
            dataIndex: 'FinGroup',
            text: 'Группа',
            width: 150,
            hidden: true
          }, {
            dataIndex: 'FinName',
            text: 'Эмитент',
            flex: 1,
            summaryRenderer: function (value) {
              return 'Итого'
            }
          }, {
            dataIndex: 'INN',
            text: 'ИНН',
            width: 120
          }, {
            dataIndex: 'Value',
            text: 'Общий лимит',
            width: 150,
            xtype: 'numbercolumn',
            format: '0,000.##',
            align: 'end',
            summaryType: 'sum',
            summaryRenderer: Ext.util.Format.numberRenderer('0,000.##')
          }, {
            dataIndex: 'Value1',
            text: 'Лимит на контрагента',
            width: 150,
            xtype: 'numbercolumn',
            format: '0,000.##',
            align: 'end',
            summaryType: 'sum',
            summaryRenderer: Ext.util.Format.numberRenderer('0,000.##')
          }, {
            dataIndex: 'Value2',
            text: 'Лимит на долговые инструменты',
            width: 150,
            xtype: 'numbercolumn',
            format: '0,000.##',
            align: 'end',
            summaryType: 'sum',
            summaryRenderer: Ext.util.Format.numberRenderer('0,000.##')
          }, {
            dataIndex: 'Value3',
            text: 'Лимит на репо прямое',
            width: 150,
            xtype: 'numbercolumn',
            format: '0,000.##',
            align: 'end',
            summaryType: 'sum',
            summaryRenderer: Ext.util.Format.numberRenderer('0,000.##')
          }, {
            dataIndex: 'Value4',
            text: 'Лимит на репо обратное',
            width: 150,
            xtype: 'numbercolumn',
            format: '0,000.##',
            align: 'end',
            summaryType: 'sum',
            summaryRenderer: Ext.util.Format.numberRenderer('0,000.##')
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [@*{
              xtype: 'tbtext',
              text: ' Поиск: '
            }, {
              xtype: 'textfield',
              itemId: 'tfFind'
            }*@, '-', {
              iconCls: 'icon-refresh',
              text: 'Обновить',
              handler: this.onRefreshClick,
              scope: this
            }, {
                iconCls: 'icon-add',
                text: 'Добавить',
                scope: this,
                handler: this.onAddClick
              }, {
                text: 'Изменить',
                disabled: true,
                itemId: 'change',
                scope: this,
                handler: this.onChangeClick
              }, {
                iconCls: 'icon-delete',
                text: 'Удалить',
                disabled: true,
                itemId: 'delete',
                scope: this,
                handler: this.onDeleteClick
              }, {
                text: 'Отчет',
                //disabled: true,
                itemId: 'check',
                scope: this,
                handler: this.onReportClick
              }, {
                text: 'Экспорт',
                itemId: 'export',
                scope: this,
                handler: this.onExportClick
              }]
          }],
          viewConfig: {
            enableTextSelection: true,
            listeners: {
              scope: this,
              selectionchange: this.onSelectChange,
              itemdblclick: this.onChangeClick
            }
          }
        });
        this.callParent();
      },

      onReportClick: function () {
        var me = this;
        var w = Ext.create('Ext.window.Window', {
          scope: this,
          title: 'Контроль лимитов',
          modal: true,
          width: 500,
          items: [{
            xtype: 'form',
            bodyPadding: 10,
            items: [{
              xtype: 'datefield',
              labelWidth: 100,
              width: 210,
              labelAlign: 'right',
              format: 'd.m.Y',
              name: 'dt',
              itemId: 'dt',
              fieldLabel: 'Дата',
              allowBlank: false,
              startDay: 1,
              listeners: {
                afterrender: function () { this.setValue(Ext.util.Cookies.get("cldt") ? new Date(Ext.util.Cookies.get("cldt")) : Ext.Date.add(Ext.Date.clearTime(new Date(), false), Ext.Date.DAY, -2)); },
                blur: function () { Ext.util.Cookies.set('cldt', this.getValue()); }
              }
            }]
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: ['->', {
              itemId: 'save',
              text: 'Проверить',
              scope: this,
              handler: function () {
                var form = Ext.getDom('RepLimit1');
                form.TypeID.value = this.tag;
                form.dt.value = w.down('#dt').rawValue;
                form.submit();
                w.close();
              }
            }, {
              text: 'Отмена',
              scope: this,
              handler: function () { w.close(); }
            }]
          }]
        }).show(this);
      },

      onRefreshClick: function () {
        this.store.proxy.extraParams = {
          TypeID: this.tag
        };
        this.store.load();
      },

      onSelectChange: function (selModel, selections) {
        this.down('#delete').setDisabled(selections.length === 0);
        this.down('#change').setDisabled(selections.length === 0);
      },

      onAddClick: function () {
        var rec = Ext.create('LimitList', { TypeID: this.tag, Value1: 0, Value2: 0, Value3: 0, Value4: 0, Value5: 0 });
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Добавить');
        this.wini.setActiveRecord(rec);
        this.wini.show(this);
      },

      onChangeClick: function () {
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Изменить');
        this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
        this.wini.show(this);
      },

      onCreateWin: function () {
        this.wini = Ext.create('LimitList.Win', {
          scope: this,
          listeners: {
            scope: this,
            create: function (form, data) {
              this.store.insert(0, data);
              this.store.sync();
            },
            update: function () {
              this.store.sync();
            }
          }
        });
      },

      onDeleteClick: function () {
        var me = this;
        var selection = this.getView().getSelectionModel().getSelection()[0];
        if (selection) {
          if (window.confirm('Удалить стр.?')) {
            selection.dropped = true;
            selection.save({
              success: function () {
                me.store.remove(selection);
              },
              failure: function () {
                selection.dropped = false;
                alert('Запись не удалена');
              }
            });
          }
        }
      },

      onExportClick: function () {
        var form = Ext.getDom('export');
        form.TypeID.value = this.tag;
        form.submit();
      }

    });

    Ext.onReady(function () {
      Ext.tip.QuickTipManager.init();
      Ext.create('Ext.Viewport', {
        layout: 'border',
        items: [{
          region: 'north',
          border: false,
          contentEl: 'header'
        }, {
            xtype: 'tabpanel',
            tabPosition: 'top',
            region: 'center',
            activeTab: 0,
            frame: false,
            items: [{
              title: 'ДУ',
              layout: 'border',
              items: [{
                region: 'center',
                tag: 1,
                xtype: 'limitlistgrid',
                store: 'storeLL1'
              }]
            }, {
              title: 'CC',
              layout: 'border',
              items: [{
                region: 'center',
                tag: 2,
                xtype: 'limitlistgrid',
                store: 'storeLL2'
              }]
            }]
          }]
        })
      });

  </script>
}
<form id="export" action="@Url.Action("exportLimitList")" method="POST" style="display: none;">
  <input type="hidden" name="TypeID" />
</form>

<form id="RepLimit1" action="@Url.Action("RepLimit1")" method="POST" style="display: none;">
  <input type="hidden" name="TypeID" />
  <input type="hidden" name="dt" />
</form>
