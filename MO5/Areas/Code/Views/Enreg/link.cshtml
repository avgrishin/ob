
@{
  ViewBag.Title = "link";
  Layout = "~/Views/Shared/_Layout.cshtml";
}
@section scripts {
  <style type="text/css">
    .icon-user-add
    {
      background-image: url(@Href("~/Content/images/user_add.png")) !important;
    }
    .icon-save
    {
      background-image: url(@Href("~/Content/images/save.gif")) !important;
    }
    .icon-add
    {
      background-image: url(@Href("~/Content/images/add.png")) !important;
    }
    .icon-delete
    {
      background-image: url(@Href("~/Content/images/delete.png")) !important;
    }
    .icon-refresh
    {
      background-image: url(@Href("~/Scripts/ExtJS62/build/classic/theme-gray/resources/images/grid/refresh.gif")) !important;
    }
    td.wrap-text div {
      white-space: normal;
    }
    .gray-row .x-grid-cell {
      text-decoration: line-through;
      color: gray;
  }
    .search-item
    {
      font: normal 11px tahoma, arial, helvetica, sans-serif;
      padding: 2px 5px 2px 5px;
      /*border: 1px solid #fff;*/
      border-bottom: 1px solid #eeeeee;
      white-space: normal;
      color: #555;
    }
    .search-item h3
    {
      display: block;
      font: inherit;
      font-weight: bold;
      color: #222;
    }
  </style>
  <link rel="stylesheet" type="text/css" href="~/Scripts/ExtJS62/build/classic/theme-gray/resources/theme-gray-all.css" />
  <script type="text/javascript" src="~/Scripts/ExtJS62/ext-bootstrap.js"></script>
  <script type="text/javascript" src="~/Scripts/ExtJS62/build/classic/locale/locale-ru.js"></script>
  <script type="text/javascript" src="~/Scripts/ExtJS62/ux/Exporter.js"></script>

  <script type="text/javascript">

  Ext.define('User', {
      extend: 'Ext.data.Model',
      idProperty: 'id',
      fields: ['id', 'Name', 'Email'],
      remoteSort: true,
      autoLoad: false,
      proxy: {
        actionMethods: { read: 'POST' },
        type: 'ajax',
        api: {
          read: '@Url.Action("getUserList")',
          destroy: '@Url.Action("delUser")'
        },
        reader: {
          type: 'json',
          rootProperty: 'data',
          messageProperty: 'message',
          successProperty: 'success'
        },
        writer: {
          type: 'json',
          rootProperty: 'data',
          writeAllFields: true,
          allowSingle: false,
          encode: false
        },
        listeners: {
          exception: function (proxy, response, operation) {
            Ext.MessageBox.show({
              title: 'REMOTE EXCEPTION',
              msg: operation.getError(),
              icon: Ext.MessageBox.ERROR,
              buttons: Ext.Msg.OK
            });
          }
        },
        simpleSortMode: true
      }
    });

    Ext.create('Ext.data.Store', {
      model: 'User',
      storeId: 'storeKM'
    });

    Ext.create('Ext.data.Store', {
      model: 'User',
      storeId: 'storeUA'
    });

    Ext.define('Roles', {
      extend: 'Ext.data.Model',
      idProperty: 'TreatyName',
      fields: ['id', { name: 'TreatyName', persist: false }, { name: 'InstName', persist: false }, { name: 'InTreaty', type: 'boolean' }]
    });

    Ext.create('Ext.data.Store', {
      model: 'Roles',
      storeId: 'storeUserTreaty',
      remoteSort: true,
      autoLoad: false,
      autoSync: false,
      proxy: {
        actionMethods: { read: 'POST' },
        type: 'ajax',
        api: {
          read: '@Url.Action("getUserTreaty")',
          update: '@Url.Action("setUserTreaty")'
        },
        reader: {
          type: 'json',
          rootProperty: 'data',
          messageProperty: 'message',
          successProperty: 'success'
        },
        writer: {
          type: 'json',
          rootProperty: 'data',
          writeAllFields: true,
          allowSingle: false,
          encode: false
        },
        simpleSortMode: true
      },
      listeners: {
        write: function (store, operation) {
          alert(operation.action + '<br>' + operation.resultSet.message);
        }
      }
    });

    Ext.define('UserTreaty.Win', {
      extend: 'Ext.window.Window',
      alias: 'widget.usertreatywin',

      initComponent: function () {
        Ext.apply(this, {
          width: 500,
          height: window.innerHeight,
          //closeAction: 'hide',
          modal: true,
          buttonAlign: 'center',
          layout: 'anchor',
          defaults: { anchor: '100%' },
          items: [{
            xtype: 'grid',
            flex: 1,
            scrollable: true,
            border: false,
            anchor: '100% 100%',
            store: 'storeUserTreaty',
            columns: [{
              xtype: 'checkcolumn',
              dataIndex: 'InTreaty',
              width: 30
            }, {
              dataIndex: 'TreatyName',
              flex: 1,
              header: "№ договора"
            }, {
              dataIndex: 'InstName',
              flex: 1,
              header: "Клиент"
            }]
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: ['->', {
              itemId: 'save',
              text: 'Сохранить',
              scope: this,
              handler: this.onSave
            }, {
                text: 'Выход',
                scope: this,
                handler: this.onExit
              }]
          }]
        });
        this.callParent();
      },

      onSave: function () {
        this.down('grid').store.sync();
      },

      onExit: function () {
        this.close();
      }
    });

    Ext.define('User.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.usergrid',
      initComponent: function () {
        Ext.apply(this, {
          wini: null,
          border: false,
          loadMask: true,
          columns: [{
            header: "Юзер",
            dataIndex: 'Name',
            width: 280
          }, {
            header: "Email",
            dataIndex: 'Email',
            width: 300
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
              iconCls: 'icon-refresh',
              text: 'Обновить',
              handler: this.onRefreshClick,
              scope: this
            }, {
              text: 'Изменить',
              disabled: true,
              itemId: 'change',
              scope: this,
              handler: this.onChangeClick
            }, {
              iconCls: 'icon-delete',
              text: 'Удалить',
              disabled: true,
              itemId: 'delete',
              scope: this,
              handler: this.onDeleteClick
            }, {
              text: 'Договоры',
              disabled: true,
              itemId: 'treaty',
              scope: this,
              handler: this.onTreatyClick
            }, '->']
          }],
          viewConfig: {
            enableTextSelection: true,
            listeners: {
              scope: this,
              beforerender: function () {
                //this.store.proxy.extraParams = { enb: this.down('#cbEnb').getValue() };
                //this.store.load();
              },
              itemdblclick: {
                fn: this.onChangeClick
              },

              selectionchange: {
                fn: this.onSelectChange
              }
            }
          }
        })
        this.callParent();
      },

      onRefreshClick: function () {
        this.store.proxy.extraParams = { TypeID: this.tag };
        this.store.load();
      },

      onChangeClick: function () {
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Изменить');
        this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
        this.wini.setUserRO(true);
        this.wini.show(this);
      },

      onCreateWin: function () {
        this.wini = Ext.create('User.Win', {
          scope: this,
          listeners: {
            scope: this,
            create: function (form, data) {
              this.store.insert(0, data);
              this.store.sync();
            },
            update: function () {
              this.store.sync();
            }
          }
        });
      },

      onSelectChange: function (selModel, selections) {
        this.down('#delete').setDisabled(selections.length === 0);
        this.down('#change').setDisabled(selections.length === 0);
        this.down('#treaty').setDisabled(selections.length === 0);
      },

      onDeleteClick: function () {
        var selection = this.getView().getSelectionModel().getSelection()[0];
        if (selection) {
          if (window.confirm('Удалить стр.?')) {
            this.store.remove(selection);
            this.store.sync();
          }
        }
      },

      onTreatyClick: function () {
        var wind = Ext.create('UserTreaty.Win', {
          scope: this
        });
        wind.setTitle('Договоры (' + this.getSelectionModel().getSelection()[0].get('Name') + ')');
        var store = wind.down('grid').store;
        store.proxy.extraParams.id = this.getSelectionModel().getSelection()[0].get('id');
        store.load({
          scope: this,
          callback: function (records, operation, success) {
            wind.show();
          }
        });
      }

    });

  Ext.onReady(function () {

    Ext.tip.QuickTipManager.init();

    Ext.create('Ext.Viewport', {
      layout: 'border',
      items: [{
        region: 'north',
        border: false,
        contentEl: 'header'
      }, {
        xtype: 'tabpanel',
        tabPosition: 'top',
        region: 'center',
        activeTab: 0,
        frame: false,
        items: [{
          itemId: 'tcID',
          title: 'Клиентские менеджеры',
          items: [{
            tag: 26195,
            region: 'center',
            xtype: 'usergrid',
            store: 'storeKM'
          }]
        }, {
          title: 'Управляющие',
          items: [{
            tag: 26194,
            region: 'center',
            xtype: 'usergrid',
            store: 'storeUA'
          }]
        }]
      }]
    });
  });
  </script>
}
