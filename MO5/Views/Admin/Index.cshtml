
@{
  ViewBag.Title = "Admin";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

@section scripts {
  <style type="text/css">
    .icon-refresh
    {
      background-image: url(@Url.Content("~/Scripts/ExtJS62/build/classic/theme-crisp/resources/images/grid/refresh.png")) !important;
    }
  </style>
  <link rel="stylesheet" type="text/css" href="~/Scripts/ExtJS62/build/classic/theme-crisp/resources/theme-crisp-all.css" />
  <script type="text/javascript" src="~/Scripts/ExtJS62/ext-bootstrap.js"></script>

  <script type="text/javascript" src="~/Scripts/ExtJS62/build/classic/locale/locale-ru.js"></script>
  <script type="text/javascript" src="~/Scripts/ExtJS62/ux/Exporter.js"></script>

  <script type="text/javascript">

    Ext.define('User', {
      extend: 'Ext.data.Model',
      idProperty: 'OUN',
      fields: ['OUN', 'UN', 'Email']
    });

    Ext.create('Ext.data.Store', {
      model: 'User',
      storeId: 'storeUser',
      remoteSort: true,
      autoLoad: true,
      proxy: {
        actionMethods: { read: 'POST' },
        type: 'ajax',
        api: {
          read: '@Url.Action("getUserList")',
          create: '@Url.Action("addUser")',
          update: '@Url.Action("updUser")',
          destroy: '@Url.Action("delUser")'
        },
        reader: {
          type: 'json',
          rootProperty: 'data',
          messageProperty: 'message',
          successProperty: 'success'
        },
        writer: {
          type: 'json',
          rootProperty: 'data',
          writeAllFields: true,
          allowSingle: false,
          encode: false
        },
        listeners: {
          exception: function (proxy, response, operation) {
            Ext.MessageBox.show({
              title: 'REMOTE EXCEPTION',
              msg: operation.getError(),
              icon: Ext.MessageBox.ERROR,
              buttons: Ext.Msg.OK
            });
          }
        },
        simpleSortMode: true
      }
    });

    Ext.define('Roles', {
      extend: 'Ext.data.Model',
      idProperty: 'RoleName',
      fields: ['RoleName', { name: 'InRole', type: 'boolean' }]
    });

    Ext.create('Ext.data.Store', {
      model: 'Roles',
      storeId: 'storeUserGroup',
      remoteSort: true,
      autoLoad: false,
      autoSync: false,
      proxy: {
        actionMethods: { read: 'POST' },
        type: 'ajax',
        api: {
          read: '@Url.Action("GetUserRoles")',
          update: '@Url.Action("SetUserRoles")'
        },
        reader: {
          type: 'json',
          rootProperty: 'data',
          messageProperty: 'message',
          successProperty: 'success'
        },
        writer: {
          type: 'json',
          rootProperty: 'data',
          writeAllFields: true,
          allowSingle: false,
          encode: false
        },
        simpleSortMode: true
      },
      listeners: {
        write: function (store, operation) {
          alert(operation.action + '<br>' + operation.resultSet.message);
        }
      }
    });

    Ext.define('Role', {
      extend: 'Ext.data.Model',
      idProperty: 'OUN',
      fields: ['OName', 'Name']
    });

    Ext.create('Ext.data.Store', {
      model: 'Role',
      storeId: 'storeRole',
      remoteSort: true,
      autoLoad: true,
      proxy: {
        actionMethods: { read: 'POST' },
        type: 'ajax',
        api: {
          read: '@Url.Action("getRoleList")',
          create: '@Url.Action("addRole")'
        },
        reader: {
          type: 'json',
          rootProperty: 'data',
          messageProperty: 'message',
          successProperty: 'success'
        },
        writer: {
          type: 'json',
          rootProperty: 'data',
          writeAllFields: true,
          allowSingle: false,
          encode: false
        },
        listeners: {
          exception: function (proxy, response, operation) {
            Ext.MessageBox.show({
              title: 'REMOTE EXCEPTION',
              msg: operation.getError(),
              icon: Ext.MessageBox.ERROR,
              buttons: Ext.Msg.OK
            });
          }
        },
        simpleSortMode: true
      }
    });

    Ext.define('User.Win', {
      extend: 'Ext.window.Window',
      alias: 'widget.userwin',

      initComponent: function () {
        Ext.apply(this, {
          width: 600,
          closeAction: 'hide',
          modal: true,
          buttonAlign: 'center',
          items: [{
            xtype: 'form',
            border: false,
            bodyPadding: 10,
            activeRecord: null,
            fieldDefaults: {
              labelAlign: 'right',
              msgTarget: 'side'
            },
            defaults: {
              anchor: '100%',
              xtype: 'textfield'
            },
            items: [{
              name: 'UN',
              fieldLabel: 'Юзер',
              allowBlank: false
            }, {
              name: 'Email',
              fieldLabel: 'Email'
            }]
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: ['->', {
              itemId: 'save',
              text: 'Сохранить',
              disabled: true,
              scope: this,
              handler: this.onSave
            }, {
              text: 'Отмена',
              scope: this,
              handler: this.onCancel
            }]
          }]
        });
        this.callParent();
      },

      setActiveRecord: function (record) {
        this.activeRecord = record;
        if (record) {
          this.down('#save').enable();
          this.down('form').getForm().loadRecord(record);
        } else {
          this.down('#save').disable();
          this.down('form').getForm().reset();
        }
      },

      setUserRO: function (ro) {
        this.down('form').getForm().findField('UN').setReadOnly(ro);
      },

      onSave: function () {
        var active = this.activeRecord, form = this.down('form').getForm();
        if (!active) {
          return;
        }
        if (form.isValid()) {
          if (this.title === 'Добавить')
            this.fireEvent('create', this, form.getValues(false, false, false, true));
          else {
            form.updateRecord(active);
            this.fireEvent('update');
          }
          this.hide();
        }
      },

      onCancel: function () {
        this.hide();
      }
    });

    Ext.define('UserGroup.Win', {
      extend: 'Ext.window.Window',
      alias: 'widget.usergroupwin',

      initComponent: function () {
        Ext.apply(this, {
          width: 250,
          //height: 500,
          //closeAction: 'hide',
          modal: true,
          buttonAlign: 'center',
          items: [{
            xtype: 'grid',
            border: false,
            bodyPadding: 10,
            hideHeaders: true,
            rowLines: false,
            store: 'storeUserGroup',
            columns: [{
              xtype: 'checkcolumn',
              dataIndex: 'InRole',
              width: 30
            }, {
              dataIndex: 'RoleName',
              width: 95
            }]
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: ['->', {
              itemId: 'save',
              text: 'Сохранить',
              scope: this,
              handler: this.onSave
            }, {
              text: 'Выход',
              scope: this,
              handler: this.onExit
            }]
          }]
        });
        this.callParent();
      },

      onSave: function () {
        this.down('grid').store.sync();
      },

      onExit: function () {
        this.close();
      }
    });

    Ext.define('User.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.usergrid',
      initComponent: function () {
        Ext.apply(this, {
          wini: null,
          border: false,
          loadMask: true,
          columns: [{
            header: "Юзер",
            dataIndex: 'UN',
            width: 280
          }, {
            header: "Email",
            dataIndex: 'Email',
            width: 300
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
              iconCls: 'icon-refresh',
              text: 'Обновить',
              handler: this.onRefreshClick,
              scope: this
            }, {
              iconCls: 'icon-add',
              text: 'Добавить',
              scope: this,
              handler: this.onAddClick
            }, {
              text: 'Изменить',
              disabled: true,
              itemId: 'change',
              scope: this,
              handler: this.onChangeClick
            }, {
              iconCls: 'icon-delete',
              text: 'Удалить',
              disabled: true,
              itemId: 'delete',
              scope: this,
              handler: this.onDeleteClick
            }, {
              text: 'Группы',
              disabled: true,
              itemId: 'group',
              scope: this,
              handler: this.onGroupClick
            }, '->']
          }],
          viewConfig: {
            enableTextSelection: true,
            listeners: {
              scope: this,
              beforerender: function () {
                //this.store.proxy.extraParams = { enb: this.down('#cbEnb').getValue() };
                //this.store.load();
              },
              itemdblclick: {
                fn: this.onChangeClick
              },

              selectionchange: {
                fn: this.onSelectChange
              }
            }
          }
        })
        this.callParent();
      },

      onRefreshClick: function () {
        //this.store.proxy.extraParams.div = this.down('#cbDiv').getValue();
        this.store.load();
      },

      onAddClick: function () {
        var rec = Ext.create('User', { UN: '', Email: '' });
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Добавить');
        this.wini.setActiveRecord(rec);
        this.wini.setUserRO(false);
        this.wini.show(this);
      },

      onChangeClick: function () {
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Изменить');
        this.wini.setActiveRecord(this.getSelectionModel().getSelection()[0]);
        this.wini.setUserRO(true);
        this.wini.show(this);
      },

      onCreateWin: function () {
        this.wini = Ext.create('User.Win', {
          scope: this,
          listeners: {
            scope: this,
            create: function (form, data) {
              this.store.insert(0, data);
              this.store.sync();
            },
            update: function () {
              this.store.sync();
            }
          }
        });
      },

      onSelectChange: function (selModel, selections) {
        this.down('#delete').setDisabled(selections.length === 0);
        this.down('#change').setDisabled(selections.length === 0);
        this.down('#group').setDisabled(selections.length === 0);
      },

      onDeleteClick: function () {
        var selection = this.getView().getSelectionModel().getSelection()[0];
        if (selection) {
          if (window.confirm('Удалить стр.?')) {
            this.store.remove(selection);
            this.store.sync();
          }
        }
      },

      onGroupClick: function () {
        var wing = Ext.create('UserGroup.Win', {
          scope: this
        });
        wing.setTitle('Группы ('+this.getSelectionModel().getSelection()[0].get('OUN')+')');
        var store = wing.down('grid').store;
        store.proxy.extraParams.UserName = this.getSelectionModel().getSelection()[0].get('OUN');
        store.load({
          scope: this,
          callback: function (records, operation, success) {
            wing.show();
          }
        });
      }

    });

    Ext.define('Role.Win', {
      extend: 'Ext.window.Window',
      alias: 'widget.rolewin',

      initComponent: function () {
        Ext.apply(this, {
          width: 600,
          closeAction: 'hide',
          modal: true,
          buttonAlign: 'center',
          items: [{
            xtype: 'form',
            border: false,
            bodyPadding: 10,
            activeRecord: null,
            fieldDefaults: {
              labelAlign: 'right',
              msgTarget: 'side'
            },
            defaults: {
              anchor: '100%',
              xtype: 'textfield'
            },
            items: [{
              name: 'Name',
              fieldLabel: 'Наименование',
              allowBlank: false
            }]
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'bottom',
            ui: 'footer',
            items: ['->', {
              itemId: 'save',
              text: 'Сохранить',
              disabled: true,
              scope: this,
              handler: this.onSave
            }, {
                text: 'Отмена',
                scope: this,
                handler: this.onCancel
              }]
          }]
        });
        this.callParent();
      },

      setActiveRecord: function (record) {
        this.activeRecord = record;
        if (record) {
          this.down('#save').enable();
          this.down('form').getForm().loadRecord(record);
        } else {
          this.down('#save').disable();
          this.down('form').getForm().reset();
        }
      },

      onSave: function () {
        var active = this.activeRecord, form = this.down('form').getForm();
        if (!active) {
          return;
        }
        if (form.isValid()) {
          if (this.title === 'Добавить')
            this.fireEvent('create', this, form.getValues(false, false, false, true));
          else {
            form.updateRecord(active);
            this.fireEvent('update');
          }
          this.hide();
        }
      },

      onCancel: function () {
        this.hide();
      }
    });

    Ext.define('Role.Grid', {
      extend: 'Ext.grid.Panel',
      alias: 'widget.rolegrid',
      initComponent: function () {
        Ext.apply(this, {
          wini: null,
          border: false,
          loadMask: true,
          columns: [{
            header: "Наименование",
            dataIndex: 'Name',
            flex: 1
          }],
          dockedItems: [{
            xtype: 'toolbar',
            dock: 'top',
            items: [{
              iconCls: 'icon-refresh',
              text: 'Обновить',
              handler: this.onRefreshClick,
              scope: this
            }, {
              iconCls: 'icon-add',
              text: 'Добавить',
              scope: this,
              handler: this.onAddClick
            }]
          }],
          viewConfig: {
            enableTextSelection: true
          }
        })
        this.callParent();
      },

      onRefreshClick: function () {
        //this.store.proxy.extraParams.div = this.down('#cbDiv').getValue();
        this.store.load();
      },

      onAddClick: function () {
        var rec = Ext.create('Role', { Name: '' });
        if (!this.wini) {
          this.onCreateWin();
        }
        this.wini.setTitle('Добавить');
        this.wini.setActiveRecord(rec);
        this.wini.show(this);
      },

      onCreateWin: function () {
        this.wini = Ext.create('Role.Win', {
          scope: this,
          listeners: {
            scope: this,
            create: function (form, data) {
              this.store.insert(0, data);
              this.store.sync();
            },
            update: function () {
              this.store.sync();
            }
          }
        });
      },

      onSelectChange: function (selModel, selections) {
      }

    });

    Ext.onReady(function () {
      Ext.tip.QuickTipManager.init();

      Ext.create('Ext.Viewport', {
        layout: 'border',
        items: [{
          region: 'north',
          border: false,
          contentEl: 'header'
        }, {
          xtype: 'tabpanel',
          tabPosition: 'top',
          region: 'center',
          activeTab: 0,
          frame: false,
          items: [{
            itemId: 'tcID',
            title: 'Пользователи',
            tag: 0,
            items: [{
              region: 'center',
              xtype: 'usergrid',
              store: 'storeUser'
            }]
          }, {
            itemId: 'tcR',
            title: 'Роли',
            tag: 0,
            items: [{
              region: 'center',
              xtype: 'rolegrid',
              store: 'storeRole'
            }]
          }]
        }]
      });
    });

  </script>
}
